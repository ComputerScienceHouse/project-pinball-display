#include <RGBmatrixPanel.h>
#include <string.h> // Include string.h for strlen and strtok
#include <Adafruit_GFX.h> // Include the Adafruit GFX library
#include <Fonts/dotmatrixdisplay4pt7b.h> // Custom Font converted from https://rop.nl/truetype2gfx/ I used a dotmatrixdisplay font.
#include <Fonts/dotmatrixdisplay3pt7b.h>
#include <Fonts/dotmatrixdisplay2pt7b.h>

// Pin configuration
#define CLK 11 // Use this on Arduino Mega
#define OE  9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2
#define D   A3

// Variables
#define HEIGHT 32
#define WIDTH  64
bool attract_mode = false;
bool free_play = true;
char grand_champion[15] = "";
char high_score_1[15] = "";
char high_score_2[15] = "";
char high_score_3[15] = "";
char high_score_4[15]= "";
char high_score_5[15] = "";
const GFXfont* current_font = &dotmatrixdisplay4pt7b;

// Statistics Variables
const char* total_games = "0";
const char* total_balls_played = "0";
const char* average_ball_time = "0";
const char* total_replays = "0";
const char* total_money_earned = "0";
const char* total_rollover = "0";
const char* total_popbumpers = "0";
const char* total_drop_targets = "0";
const char* total_targets = "0";
const char* total_scoop = "0";
const char* total_slingshots = "0";
const char* total_flips = "0";
const char* total_auto_kicker = "0";
const char* total_trough = "0";
const char* total_ramps = "0";

// Create a 64x32 matrix (width 64, height 32)
RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false, 64);

// Brightness scaling factor (0.0 to 1.0)
float brightness = 1; // Adjust this value to change brightness (0.0 for off, 1.0 for full brightness)

// ALL PICTURES
const unsigned char PROGMEM csh_logo_bitmap[] = {
 0x0, 0x0, 0xff, 0xff, 0xfe, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 
  0xff, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xff, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xff, 0xff, 0xff, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 
  0xff, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x0, 0x3f, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xf0, 0x0, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 
  0x9f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 0x80, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xf3, 0xff, 0x80, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 
  0x9f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xc7, 0x9f, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xf3, 0xc0, 0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xc0, 
  0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 0x9f, 0xff, 0x0, 0x0, 
  0x0, 0x1, 0xf3, 0xff, 0x9f, 0xff, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 
  0x9f, 0xff, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 0x9f, 0xff, 0x0, 0x0, 
  0x0, 0x1, 0xf0, 0x7, 0x9f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf0, 0x7, 
  0x9f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xc7, 0x9f, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xf3, 0xff, 0x9f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 
  0x80, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf3, 0xff, 0x80, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xf3, 0xff, 0x9f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf0, 0x0, 
  0x1f, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xf8, 0x0, 0x3f, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xff, 0xff, 0xff, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 
  0xff, 0x1f, 0x0, 0x0, 0x0, 0x1, 0xff, 0xff, 0xff, 0x1f, 0x0, 0x0, 
  0x0, 0x1, 0xff, 0xff, 0xff, 0x1f, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 
  0xfe, 0x1f, 0x0, 0x0, 
};

const unsigned char PROGMEM csh_pinball_image[] = { 
  0x6, 0x6, 0x0, 0x0, 0xa, 0x21, 0x80, 0x0, 0x1, 0x6, 0x58, 0x1, 
  0xaa, 0x43, 0x3f, 0xc0, 0x0, 0x86, 0x54, 0x2, 0xaa, 0x4c, 0x0, 0x0, 
  0x0, 0x86, 0x4a, 0x5, 0x2a, 0x0, 0x1, 0xf0, 0x80, 0x45, 0x24, 0x2, 
  0x4a, 0x0, 0x1, 0xfc, 0x60, 0x24, 0x98, 0x1, 0x8a, 0xf, 0xf3, 0xfc, 
  0x20, 0x24, 0x4c, 0x3, 0x1a, 0x18, 0x3, 0xfc, 0x10, 0x4, 0x23, 0xc, 
  0x6a, 0x0, 0x3, 0xfc, 0x0, 0x4, 0x1c, 0x3, 0xca, 0x0, 0x3, 0xf8, 
  0x0, 0x3, 0xff, 0xff, 0xfc, 0x1, 0xf1, 0xf8, 0x0, 0x0, 0x0, 0x0, 
  0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
  0x38, 0xe4, 0x43, 0xcf, 0xa2, 0xf1, 0xc8, 0x20, 0x45, 0x14, 0x42, 0x22, 
  0x22, 0x8a, 0x28, 0x20, 0x41, 0x4, 0x42, 0x22, 0x32, 0x8a, 0x28, 0x20, 
  0x40, 0xe7, 0xc3, 0xc2, 0x2a, 0xf3, 0xe8, 0x20, 0x40, 0x14, 0x42, 0x2, 
  0x26, 0x8a, 0x28, 0x20, 0x45, 0x14, 0x42, 0x2, 0x22, 0x8a, 0x28, 0x20, 
  0x38, 0xe4, 0x42, 0xf, 0xa2, 0xf2, 0x2f, 0xbe, 0x0, 0x0, 0x0, 0x0, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x2, 
  0x8, 0x0, 0x2, 0x18, 0x10, 0x0, 0x3, 0x81, 0x4, 0x0, 0x1, 0xc, 
  0x10, 0x44, 0x3f, 0x80, 0x82, 0x18, 0x1, 0x4, 0x10, 0x2a, 0x3, 0xe0, 
  0x82, 0x4, 0x0, 0x84, 0x20, 0x11, 0x3f, 0xf8, 0x2, 0x6, 0x0, 0x42, 
  0x40, 0x0, 0x3, 0x9f, 0x1, 0x1, 0x0, 0x41, 0x40, 0x80, 0x0, 0x7, 
  0x81, 0x1, 0x80, 0x20, 0xc0, 0x80, 0x0, 0x1, 0xc0, 0x80, 0x40, 0x10, 
  0x0, 0x80, 0x0, 0x0, 0xc0, 0x80, 0x0, 0x10, 0x1, 0x0, 0x0, 0x0, 
  0xc0, 0x0, 0x0, 0x18, 
};

// SARDINE CAN ANIMATION
// 'sardine4', 64x32px
const uint16_t myBitmapsardine4 [] PROGMEM = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x94d4, 0xd6b9, 0xf7bb, 0xef7b, 0xf7dc, 0xe73c, 0x9d15, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9493, 0x8c72, 
	0x73af, 0x736e, 0x6b2d, 0x738e, 0x738e, 0x6b6e, 0xad74, 0xfffe, 0xfffe, 0xffff, 0xfffe, 0xffdf, 0xffff, 0x9d15, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c73, 0x6b6e, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x736d, 0x73ae, 0x632c, 0xf79e, 0xef7c, 0xd698, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7dc, 0x9cb4, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c73, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x8c72, 0x8c72, 0x8c50, 0xffff, 0xb595, 0xffff, 0xffff, 0xffff, 0xffff, 0xe73b, 0xef99, 0xbdf5, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c51, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x632d, 0x73ae, 0x6b2d, 0xdeb7, 0xce76, 0xf7de, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xef9c, 0xdef6, 0xc613, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x73af, 0x8411, 0x7c11, 0x73af, 
	0x6b4d, 0x9473, 0x94b4, 0xbdf3, 0xff9d, 0xffde, 0xfffe, 0xef9c, 0xfffe, 0xffff, 0xffff, 0xffff, 0xffff, 0xd6b7, 0xad0f, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x9492, 0xf79b, 0xf77b, 0xf75a, 0xf7bc, 0xc633, 0xdefa, 0xffff, 0xffff, 0xffff, 0xef7c, 0xce74, 0xb52f, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xf799, 0xce12, 0xbdb3, 0x7369, 0xded6, 0xce73, 0xe6f7, 0xffdd, 0xad55, 0xffff, 0xbdf3, 0xad30, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xb5b0, 0xad6f, 0xe6f7, 0xdeb7, 0xdeb5, 0xd694, 0xc5f4, 0xb571, 0xfffe, 0xffff, 0xad71, 0xa50f, 0x9cb3, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x9ccf, 0x946b, 0xc612, 0xce34, 0xc5f2, 0xbdd1, 0xc5f2, 0xc5d2, 0xbdd4, 0xffdc, 0x948d, 0x41e5, 0x4a28, 
	0x7bb0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xa4f1, 0xbdb1, 0xd673, 0xb56f, 0xb590, 0xa4ed, 0xe6d4, 0xce13, 0xc5f2, 0xad2f, 0x7b8a, 0x41e6, 0x4a27, 
	0x4a28, 0x4227, 0x41e7, 0x630c, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xbdd3, 0xd697, 0xbdb3, 0xad4f, 0xad2f, 0x840a, 0xd694, 0xd694, 0xa4ee, 0x2902, 0x20a1, 0x18a1, 
	0x18a1, 0x2944, 0x4207, 0x4a48, 0x5248, 0x4a27, 0x5268, 0x736c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xa535, 0xd676, 0xc614, 0xad31, 0xd675, 0xef78, 0xef3a, 0xe737, 0xb590, 0x8c0c, 0x7b6a, 0x734b, 0x41c5, 
	0x39a5, 0x18a1, 0x18a1, 0x18a1, 0x20c2, 0x41e6, 0x4a07, 0x4a47, 0x5ae9, 0x4a49, 0x52aa, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x738e, 0xa534, 0x73ad, 0x5a87, 0xded6, 0xded6, 0xf79b, 0xdeb4, 0xf798, 0xc611, 0xbd90, 0x7b69, 0x83aa, 0x942d, 0x7bac, 
	0x738c, 0x62ea, 0x4a27, 0x39a5, 0x3164, 0x18a1, 0x1881, 0x18c1, 0x20e2, 0x5267, 0x5289, 0x52c9, 0x528b, 0x8431, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x62eb, 0x5a89, 0x5249, 0x5247, 0x6b0a, 0xef58, 0xef58, 0xce53, 0xdeb5, 0xad2e, 0x7349, 0x6ae7, 0x838b, 0x942d, 0x8c0c, 
	0x83ed, 0x83ed, 0x6b4b, 0x630b, 0x630b, 0x5ae9, 0x5289, 0x41e6, 0x2103, 0x18c2, 0x41e6, 0x41e7, 0x4a48, 0x62eb, 0x736c, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x5249, 0x49e7, 0x41a5, 0x49e7, 0x41c6, 0x39a5, 0x7bab, 0xef58, 0xf798, 0xc5f1, 0xb54f, 0x62a7, 0x62e9, 0x5a46, 0x5a67, 0x840d, 
	0x83cc, 0x83ed, 0x8c0e, 0x6b6a, 0x6b6b, 0x5ae9, 0x6b4d, 0x6b0a, 0x4a47, 0x4a49, 0x1081, 0x738f, 0x5acb, 0x41a4, 0x5aca, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x41e6, 0x3985, 0x49e6, 0x41a5, 0x3985, 0x41a5, 0x39c6, 0x9cce, 0xded4, 0xc611, 0x2922, 0x2922, 0x62ca, 0x5a87, 0x41a5, 0x5a67, 
	0x7bac, 0x83cd, 0x7bcd, 0x73ae, 0x738d, 0x736c, 0x5ae9, 0x7bce, 0x5ac9, 0x5289, 0x4207, 0x39c5, 0x83ce, 0x5248, 0x41c5, 0x4a27, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x41e7, 
	0x39a5, 0x4a07, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x4a27, 0x62c9, 0xdeb4, 0xa50d, 0x5a86, 0x62e8, 0x6b29, 0x6ae9, 0x5a67, 0x41a4, 
	0x4a05, 0x734b, 0x7b8c, 0x7bac, 0x6b49, 0x7bab, 0x738c, 0x83ee, 0x736b, 0x62eb, 0x5a89, 0x4206, 0x8c10, 0x736c, 0x3144, 0x5268, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x39c6, 
	0x4a49, 0x5248, 0x4a07, 0x41c6, 0x41a6, 0x5227, 0x49e7, 0x7b8d, 0xc612, 0x7bca, 0x948c, 0x7baa, 0x8c2c, 0x9c8e, 0x8c0b, 0x944c, 
	0x83cc, 0x83cb, 0x736b, 0x736b, 0x7b8b, 0x734a, 0x736b, 0x736b, 0x736b, 0x736b, 0x6b0a, 0x4184, 0x5248, 0x840e, 0x39a4, 0x2103, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2123, 
	0x5289, 0x5289, 0x5247, 0x4a07, 0x3985, 0x62cb, 0x5a89, 0x734b, 0xa510, 0x8c4c, 0x8c4c, 0x946d, 0x9ccf, 0x946c, 0x9c8d, 0x840e, 
	0x8beb, 0x83cc, 0x83cc, 0x83cc, 0x7b8a, 0x7b49, 0x7b49, 0x62a7, 0x5aa7, 0x5ae8, 0x5aa8, 0x41a4, 0x20c2, 0x8c50, 0x3163, 0x4a27, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b4d, 
	0x5aca, 0x5aa9, 0x5289, 0x4a48, 0x5248, 0x62ea, 0x736c, 0x6b2b, 0xa510, 0xb570, 0xa4ef, 0xa4f0, 0x8c2d, 0x946d, 0x8c0c, 0x946e, 
	0x8c2c, 0x8c0d, 0x83ec, 0x736a, 0x7b49, 0x7b8a, 0x83aa, 0x5a66, 0x62c8, 0x83ec, 0x7bcc, 0x62c7, 0x18c1, 0x62ca, 0x3963, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x526a, 0x5aeb, 0x52cb, 0x528a, 0x630b, 0x630b, 0x6b2b, 0x944e, 0xad30, 0x9ccf, 0xa4ef, 0xa510, 0xa4f0, 0x8c2e, 0x8c0b, 0x6b29, 
	0x83ec, 0x8c0d, 0x736a, 0x8c4e, 0x736a, 0x736a, 0x7349, 0x736a, 0x7b8a, 0x736b, 0x83ed, 0x732a, 0x4a07, 0x3985, 0x2922, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x4a49, 0x62eb, 0x5aeb, 0x630b, 0x7bce, 0x83cc, 0x8c50, 0xad50, 0xad31, 0xb590, 0x9cce, 0xa530, 0x946c, 0x946f, 0x840c, 0x7b8b, 
	0x5a86, 0x6b29, 0x7bcc, 0x83ec, 0x7b8b, 0x83ed, 0x7b6b, 0x736a, 0x83ac, 0x83cc, 0x7b8a, 0x5245, 0x62c8, 0x3984, 0x630b, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x52aa, 0x4a28, 0x4a08, 0x5289, 0x738d, 0xb533, 0x9caf, 0x9cef, 0x9cae, 0xa52f, 0x9cce, 0xad31, 0xa510, 0x8c2d, 0x946d, 0x8c2c, 
	0x736a, 0x5aa7, 0x5a87, 0x734a, 0x8bec, 0x7b8b, 0x7b6c, 0x7b8c, 0x738b, 0x840e, 0x7bcd, 0x2102, 0x5a68, 0x3963, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x4a49, 0x4a28, 0x4a28, 0x5269, 0x5248, 0x52a8, 0xad52, 0xe719, 0xad52, 0x7baa, 0x9cae, 0x8c2d, 0x8c0d, 0x8c4d, 0x8c4d, 
	0x7b8a, 0x7bab, 0x4a26, 0x5a86, 0x62c7, 0x62e9, 0x738b, 0x736c, 0x7b8c, 0x7bac, 0x9471, 0x9491, 0x4184, 0x3983, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x4a28, 0x4a28, 0x4a49, 0x5269, 0x4a28, 0x4a28, 0x4a28, 0x5288, 0x8c70, 0xbdb5, 0x9cae, 0x7bca, 0x6b49, 0x7baa, 
	0x7bab, 0x83cb, 0x83cc, 0x5aa7, 0x41a4, 0x5226, 0x4a47, 0x62ea, 0x738d, 0x9d11, 0x9490, 0x840e, 0x10a1, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x4a28, 0x4a6a, 0x4a49, 0x4a49, 0x4a28, 0x4a69, 0x4a48, 0x5289, 0x4a48, 0x5249, 0x6b4c, 0x9cb2, 0x948f, 
	0x62c8, 0x6b0a, 0x736a, 0x736a, 0x3143, 0x20e2, 0x3124, 0x8c4f, 0x9471, 0x8c71, 0x8c4f, 0x4a89, 0x39a5, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4a6a, 0x4a29, 0x4208, 0x4a49, 0x4a49, 0x4a49, 0x4a28, 0x5248, 0x5249, 0x5249, 0x5269, 
	0x630c, 0x9c90, 0x9cb0, 0x942e, 0x9450, 0x9c91, 0x9450, 0x9450, 0x8c50, 0x8432, 0x6b4b, 0x4a49, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4a28, 0x4a48, 0x4a28, 0x4a6a, 0x4a49, 0x4a6a, 
	0x4a49, 0x5269, 0x5aaa, 0x5aaa, 0x6b4d, 0x9c71, 0x9491, 0x9470, 0x8c51, 0x632c, 0x73ae, 0x73af, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4a28, 0x4a49, 0x4a28, 0x5289, 
	0x4a49, 0x528a, 0x5aaa, 0x5aaa, 0x5aaa, 0x52aa, 0x52eb, 0x5b0c, 0x62cb, 0x630c, 0x6b8d, 0x7bef, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x52aa, 0x4a49, 0x4a28, 
	0x4a48, 0x5269, 0x5249, 0x5aaa, 0x5aaa, 0x5aab, 0x52cb, 0x5acb, 0x5aec, 0x632d, 0x6b8e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x5acb, 
	0x5aaa, 0x5aaa, 0x4a28, 0x4a6a, 0x5aaa, 0x52cb, 0x5b0c, 0x5b0c, 0x632c, 0x6b6e, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
// 'sardine3', 64x32px
const uint16_t myBitmapsardine3 [] PROGMEM = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7bef, 0xa514, 0x8c72, 0x73ae, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7bae, 0x0000, 0x0000, 0x0000, 0x0000, 0x73ae, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xad75, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x7bef, 0x8c51, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c72, 0x736c, 0x5aca, 0x5aea, 0x8c71, 0x6b4c, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x9492, 0x8c70, 0x73ad, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x73ae, 0x9cd3, 0x8c50, 0x7bee, 0x83ee, 0x8c2f, 0x73cd, 0x736c, 0x7bce, 0x6b4c, 0x632b, 
	0xce38, 0x7bee, 0x73ad, 0x6b2b, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9492, 0x9471, 0x8c50, 0x9451, 0x9451, 0x8c50, 0x736c, 0x7bcd, 0x736c, 0x6b2b, 0x8c51, 
	0x7bce, 0x7bad, 0x6b4b, 0x73ad, 0x73ae, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9cd3, 0xa513, 0x9cd2, 0x9cf3, 0x94d1, 0x94d3, 0xad75, 0x8c30, 0x840f, 0x7bce, 0x7bee, 
	0x7bee, 0x632b, 0x52a9, 0x83ce, 0x6b6c, 0x7bcd, 0x62ea, 0x7bcd, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xa535, 0xa513, 0xa535, 0xb5b6, 0x9cf4, 0x73ae, 0xb5d7, 0x8c91, 0x9491, 0x9cb2, 0x6b6d, 0x83ee, 
	0x738d, 0x840f, 0x83ee, 0x736c, 0xa513, 0x52a9, 0x632b, 0x632b, 0x6b4b, 0x6b4b, 0x738c, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xad75, 0xa534, 0xb5b6, 0x9cf3, 0x9d14, 0x9d13, 0x9cf3, 0x842f, 0xb5f6, 0x73ad, 0x840f, 0x5ac9, 
	0x5a88, 0x736c, 0x736d, 0x736c, 0x5288, 0x39c5, 0x2123, 0x18c1, 0x3164, 0x632a, 0x6b4b, 0x6b6c, 0x6b6c, 0x9d14, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xb554, 0xad55, 0xb5d7, 0x9d14, 0x9cd3, 0x94b2, 0x94b1, 0x9471, 0x8c50, 0x83ef, 0x630a, 0x5268, 0x5247, 
	0x6b2b, 0x5268, 0x8c0f, 0xa4f0, 0x9ccf, 0x840e, 0x738c, 0x6b4b, 0x4a48, 0x20e2, 0x52a9, 0x5aea, 0x5b0a, 0x7bcd, 0x840f, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xb575, 0xa514, 0xa4f4, 0x9cf3, 0x94d3, 0x8cb2, 0x8c2f, 0x83ee, 0x6b4b, 0x5aa9, 0x5288, 0x5247, 0x5247, 0x5247, 
	0x5267, 0x5ac9, 0xbdb4, 0xa4d0, 0x9cd0, 0x9c8f, 0x8c4e, 0x840e, 0x73ac, 0x632b, 0x31a5, 0x9491, 0x83ee, 0x5268, 0x73ad, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xa513, 0x9491, 0x9cf4, 0x9471, 0x840f, 0x7bad, 0x630a, 0x5aa9, 0x5a88, 0x5267, 0x5247, 0x4a47, 0x5247, 0x5247, 
	0x5268, 0x736c, 0xa512, 0xad2f, 0xa510, 0xa4f1, 0x9caf, 0x9cf0, 0x7bcd, 0x6b2b, 0x632b, 0x4a68, 0xa534, 0x6b8c, 0x5aa8, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x9cb2, 0x8c50, 0x83ee, 0x7bce, 0x6b4c, 0x632b, 0x630a, 0x5aa9, 0x5288, 0x5268, 0x5267, 0x5247, 0x5247, 0x5247, 0x5288, 
	0x4a68, 0x9cd0, 0x9caf, 0xa4cf, 0x8c2e, 0x9cd1, 0xa4f0, 0x9cd1, 0x94af, 0x840d, 0x7bac, 0x5ae9, 0x9d13, 0x9491, 0x5a88, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x8c2f, 0x83ee, 0x736c, 0x6b4b, 0x6b2b, 0x6b2b, 0x6b4c, 0x5ac9, 0x5a88, 0x5247, 0x5a68, 0x5268, 0x4a27, 0x5267, 0x5288, 0x5aa9, 
	0x5aa9, 0xb592, 0xad51, 0xb571, 0x9cad, 0x8c4c, 0x840c, 0x94ae, 0x8c6d, 0x8c4e, 0x8c2e, 0x5aa6, 0x7bad, 0x9cf3, 0x5268, 0x5267, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x7bcd, 0x73ad, 0x6b6c, 0x6b2b, 0x6b0a, 0x62ea, 0x52a9, 0x6b0a, 0x62ca, 0x5a89, 0x5267, 0x5a88, 0x5a88, 0x5aa9, 0x5ac9, 0x5ac9, 
	0x630a, 0xad51, 0xbdb2, 0xbdb2, 0xad4f, 0x8c4b, 0x9c8c, 0x83ca, 0x7369, 0x738b, 0x736a, 0x6308, 0x3184, 0xa4d3, 0x4a47, 0x7bee, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x7bce, 0x7bad, 0x7b8d, 0x6b4b, 0x6b0a, 0x62c9, 0x6ae9, 0x6b0a, 0x62c9, 0x62c9, 0x5ac8, 0x5a88, 0x5aa9, 0x5268, 0x738c, 0x630a, 
	0x7bad, 0xb592, 0xbdd3, 0xc5f3, 0xbdd1, 0xaced, 0xaced, 0x83ea, 0x946d, 0x9cae, 0x9490, 0x7b8b, 0x31a5, 0x7bcd, 0x5267, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x83ef, 0x840f, 0x73ae, 0x6b8c, 0x736c, 0x6b0a, 0x6b0a, 0x62ea, 0x62ea, 0x6b2b, 0x6b0a, 0x630a, 0x7bcd, 0x6b4b, 0x9451, 0x73ae, 
	0x8c0f, 0xbdd2, 0xb572, 0xc5f2, 0xc5f3, 0xa50e, 0x9cee, 0x948c, 0xa4ee, 0xa4cf, 0xa4cf, 0x83eb, 0x6ae9, 0x5aa7, 0x5248, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x7bad, 0x7bef, 0x7bcd, 0x7bad, 0x6b6c, 0x736c, 0x736c, 0x6b4b, 0x630a, 0x6b0a, 0x5a87, 0x7bce, 0x7bad, 0x8c30, 0x94b2, 0x8c50, 
	0x8c2d, 0x840b, 0xbdb2, 0xcdf4, 0xc5f4, 0xbdb2, 0xbdd2, 0xbdd2, 0xad31, 0xa4ef, 0x9cad, 0x62e7, 0x948e, 0x5aa7, 0x9cd1, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x7bae, 0x736c, 0x736c, 0x738d, 0x7bce, 0x6b4c, 0x632b, 0x6b6c, 0x6b6c, 0x6b2b, 0x6b0a, 0x7bce, 0x738d, 0x8c71, 0x94d2, 0x9cb3, 
	0x9cae, 0x83eb, 0x7bca, 0xad0e, 0xbd92, 0xc5f2, 0xc5f4, 0xbdd3, 0xbdd2, 0xb574, 0xa511, 0x62c8, 0x83cc, 0x7309, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x738d, 0x736c, 0x736c, 0x738c, 0x736c, 0x738c, 0x738d, 0x630a, 0x6b0b, 0x7bcd, 0x8c30, 0x9491, 0x9cd3, 0xa514, 0x9cb1, 
	0xb592, 0xad30, 0x7b89, 0x7b89, 0x8c4c, 0xa50f, 0xbdd2, 0xb572, 0xb592, 0xad52, 0xc5f6, 0xbd95, 0x7b69, 0x8c2e, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x736c, 0x736c, 0x736c, 0x736c, 0x73ae, 0x736c, 0x738d, 0x736c, 0x7bcd, 0x9cb2, 0xb592, 0x9cb1, 0x83cc, 0x9cee, 
	0xbdf4, 0xb592, 0xb592, 0x8c2b, 0x5aa7, 0x7b89, 0x83ed, 0xa4d0, 0xbdd4, 0xc636, 0xc616, 0xb572, 0x83ab, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x736c, 0x736c, 0x736c, 0x6b4c, 0x738d, 0x6b4c, 0x7bad, 0x736c, 0x738d, 0x840f, 0xbdd6, 0xc617, 
	0x8c2e, 0x948e, 0xa4ef, 0xa50f, 0x5265, 0x41e4, 0x736b, 0xc617, 0xc636, 0xc636, 0xbe16, 0x8c4f, 0x8c6e, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632b, 0x738d, 0x6b4b, 0x736c, 0x736c, 0x736c, 0x7b8d, 0x738c, 0x73ad, 
	0x83ee, 0xbdb6, 0xc617, 0xbdd5, 0xbdd6, 0xbdf6, 0xbdd5, 0xbdf7, 0xbe17, 0xbdf6, 0xa514, 0x9cf1, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632b, 0x6b6c, 0x6b4b, 0x632b, 0x73ae, 0x736c, 0x73ae, 
	0x7bad, 0x73ae, 0x7bcf, 0x7bad, 0x94b2, 0xbdd6, 0xb5d4, 0xb5d6, 0xb596, 0x9491, 0x8c51, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632b, 0x736c, 0x6b4c, 0x7bad, 
	0x736c, 0x73ae, 0x73ae, 0x73ce, 0x7bce, 0x7bce, 0x7bce, 0x7bee, 0x840f, 0x840f, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x736c, 0x736c, 0x7bad, 0x73ae, 0x73ae, 0x73cf, 0x83ef, 0x7bef, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x738e, 0x73ae, 0x7bef, 0x8430, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
// 'sardine2', 64x32px
const uint16_t myBitmapsardine2 [] PROGMEM = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8431, 0x6b6d, 0x6b6e, 0x630c, 0x62ec, 0x632c, 0x7bf0, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b4d, 0x8c72, 0x8430, 0x83ef, 0x6b4c, 0x5aeb, 0x630b, 0x630b, 0x7bef, 0x5aeb, 0x5aeb, 
	0x8c51, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c71, 0x8c71, 0x8451, 0x9491, 0x9490, 0x8c71, 0x7bae, 0x6b4d, 0x62eb, 0x5aa9, 0x5289, 
	0x842f, 0x6b4d, 0x528a, 0x62eb, 0x7bef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xb5b6, 0x8c91, 0x94d2, 0x94b2, 0x9cd3, 0x94b2, 0x94b2, 0xb5b6, 0x7c0f, 0x9491, 0x8c50, 0x8430, 
	0xb5b6, 0x6b4d, 0x5aca, 0x62eb, 0x6b2c, 0x7bae, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0xa555, 0x9cf3, 0x9cf3, 0xb5b5, 0x9cd3, 0x6b6d, 0xbe17, 0x9cf3, 0x9cd3, 0xbdf6, 0x738e, 0x94b3, 
	0x9d13, 0x8c51, 0x8c2f, 0x8c10, 0x73ae, 0x5ac9, 0xce9b, 0xbdd8, 0x83f0, 0x73ae, 0x6b4d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xb5b6, 0xa534, 0xa534, 0xb5b6, 0x9cd3, 0xa514, 0x9cf3, 0xa514, 0x7bf0, 0xc618, 0xa4f3, 0xa514, 0x840f, 
	0x73ae, 0x7bf0, 0x9491, 0x9471, 0x630b, 0x5aaa, 0xbdf7, 0x9cd2, 0xb5b6, 0x52ca, 0x6b8d, 0x6b4d, 0x630c, 0x94b2, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xc619, 0xb555, 0xa534, 0xbdf7, 0x9cf4, 0x9d14, 0xa514, 0x9d14, 0x9cf3, 0xa533, 0x9cf3, 0x94d3, 0xa555, 0xa534, 
	0x94b1, 0x738d, 0x8c71, 0x52aa, 0x5aca, 0xdeda, 0x6b4b, 0x6b4d, 0x94b2, 0xc5f7, 0x8c0f, 0x52a9, 0x4a48, 0x6b6d, 0x73ae, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xb597, 0xa536, 0xa513, 0xa534, 0xa514, 0x9cf3, 0x94b2, 0x9cf3, 0x9cf3, 0x9cf3, 0xa533, 0x9cf3, 0x9cf3, 0x8c6e, 
	0x6b0a, 0x5aca, 0x5aa9, 0x94b2, 0xbdd6, 0xf77c, 0x9cb2, 0x6b6e, 0x83ef, 0x83f0, 0x5a89, 0x8c50, 0x738e, 0x39c6, 0x6b2b, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0xb596, 0xad55, 0xa4f3, 0xad76, 0x9cf3, 0x94d3, 0x94b3, 0x9cf3, 0xa514, 0x9cd3, 0x9cf3, 0x94b2, 0x9491, 0x840f, 0x736d, 
	0x5267, 0x4a05, 0x4228, 0x4207, 0x5269, 0x8410, 0xbdb5, 0xad55, 0x6b2c, 0x942f, 0x5aa9, 0x2944, 0x9cb0, 0x738d, 0x4a06, 0x62eb, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0xad55, 0xa514, 0xa514, 0xa534, 0x9d14, 0x94d2, 0x9cf3, 0x94b3, 0x94b2, 0x8c91, 0x8c71, 0x8c51, 0x7bcf, 0x736d, 0x5268, 
	0x41e6, 0x4a05, 0x4207, 0x62eb, 0x6b4d, 0x738e, 0x7bce, 0x7bef, 0xce38, 0x8c2e, 0x736c, 0x4a06, 0x942f, 0x83ee, 0x41c5, 0x5289, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x9cf3, 0x9cf3, 0xa534, 0xa514, 0x9d14, 0x94b2, 0x9491, 0x94d2, 0x8c71, 0x842f, 0x8430, 0x7bcf, 0x6b4d, 0x62ca, 0x4a27, 0x41e4, 
	0x41c4, 0x39a4, 0x7bce, 0x840f, 0x83ef, 0x83ee, 0x8410, 0x8c10, 0x736c, 0x8c2e, 0x83cd, 0x49e4, 0x5227, 0x9cb1, 0x39c4, 0x39a5, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x9cd2, 0x9cf2, 0x9d13, 0xa513, 0x9492, 0x94d3, 0xb5b6, 0x8c71, 0x7bce, 0x73ce, 0x73ae, 0x6b2b, 0x5a69, 0x5228, 0x4a06, 0x39a4, 
	0x39a5, 0x3984, 0x8c0f, 0x840f, 0x8c51, 0x8c10, 0x8410, 0x840e, 0x7b8b, 0x7b8a, 0x62e8, 0x4a05, 0x3164, 0xa4d2, 0x41c5, 0x6b0c, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x8c71, 0x94b1, 0x94b2, 0x9cf3, 0x9cd3, 0x94d2, 0x9492, 0x7c10, 0x9cf3, 0x840f, 0x6b6d, 0x6b2c, 0x5248, 0x4a06, 0x3985, 0x41c4, 
	0x41a4, 0x49e7, 0x7bae, 0x8c2f, 0x8c50, 0x8c51, 0x8c2e, 0x8c0c, 0x8c2b, 0xa4f0, 0x9caf, 0x7349, 0x2923, 0x734c, 0x41c4, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x9472, 0x842f, 0x842f, 0x9492, 0x9492, 0x8c31, 0x840f, 0x8c71, 0x8c51, 0x6b6d, 0x6b4d, 0x4a28, 0x41e6, 0x49e5, 0x41a5, 0x41a4, 
	0x41a5, 0x5288, 0x9471, 0x8c71, 0x8c51, 0x8c4f, 0x9cae, 0x9c8d, 0xacee, 0x948d, 0x948e, 0x7baa, 0x4204, 0x4a06, 0x41c5, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x736d, 0x8410, 0x842f, 0x7bcf, 0x7bcf, 0x73ae, 0x73ae, 0x6b6d, 0x632c, 0x5aeb, 0x4a07, 0x4a07, 0x41c5, 0x41c4, 0x39a5, 
	0x39a5, 0x736c, 0x8c4f, 0x9cd2, 0x840f, 0x94b1, 0xce32, 0xc5d1, 0xb56f, 0x9cad, 0x944c, 0x5245, 0x840b, 0x49e5, 0x83ee, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x630c, 0x5aeb, 0x630c, 0x7bcf, 0x73ae, 0x738d, 0x736d, 0x62eb, 0x5289, 0x5268, 0x4a27, 0x39c5, 0x41c4, 0x41c5, 0x41a5, 
	0x5aa9, 0x8c50, 0x9451, 0x8c2f, 0x9492, 0xb592, 0xce12, 0xbdb1, 0xb570, 0xbd93, 0xa4d1, 0x41c5, 0x6b2a, 0x5246, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x630c, 0x5aeb, 0x5b0c, 0x62eb, 0x630b, 0x6b2c, 0x736d, 0x5aaa, 0x5268, 0x4a48, 0x4a27, 0x4a06, 0x49e5, 0x41c5, 0x41a5, 
	0x6b2c, 0x7bad, 0x9cb2, 0x9cb3, 0x9470, 0xad2f, 0xad0f, 0xad30, 0xa4ef, 0x9490, 0xbd94, 0xb574, 0x5267, 0x4a45, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x632c, 0x632c, 0x632c, 0x632c, 0x62eb, 0x5aeb, 0x630b, 0x630b, 0x736d, 0x4a06, 0x41c6, 0x5227, 0x49e6, 0x41e6, 
	0x736d, 0xa4b2, 0xa4f1, 0x946d, 0x5266, 0x7baa, 0x7bcb, 0x8c8e, 0x9cd0, 0xbd94, 0xb595, 0x9cd2, 0x5287, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x632c, 0x632c, 0x630b, 0x5aeb, 0x5aeb, 0x632c, 0x5aca, 0x632c, 0x62eb, 0x630c, 0x6b4d, 0x5248, 0x4a48, 
	0x8c30, 0x7bcd, 0x9cef, 0xad2f, 0x6b07, 0x3162, 0x5ae7, 0xc635, 0xb593, 0xad73, 0xa553, 0x630b, 0x62eb, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632c, 0x52cb, 0x5aeb, 0x630c, 0x5aaa, 0x632c, 0x5aeb, 0x5aeb, 0x630c, 0x630c, 0x632c, 
	0x6b4d, 0x9cf2, 0xe6d8, 0xe6f8, 0xded8, 0xd6b7, 0xce76, 0xbe15, 0xb5b4, 0xa533, 0x7bef, 0x7bcd, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x630c, 0x5aeb, 0x62eb, 0x5aca, 0x5acb, 0x630c, 0x5b0c, 0x634d, 
	0x634d, 0x6b4d, 0x632c, 0x6b6d, 0x83f0, 0xb597, 0xb5b6, 0xad95, 0xa533, 0x842f, 0x8452, 0x8c92, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b2c, 0x62cb, 0x630c, 0x5aab, 0x6b2c, 
	0x630c, 0x6b4d, 0x6b4d, 0x6b8e, 0x738e, 0x738e, 0x73ae, 0x73ce, 0x73ae, 0x73f0, 0x8431, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b6d, 0x5b0c, 
	0x5aeb, 0x632c, 0x632c, 0x6b6d, 0x6b8e, 0x738e, 0x6b8e, 0x73ae, 0x7bcf, 0x7c10, 0x8451, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x6b6d, 0x632c, 0x632c, 0x6b6d, 0x736d, 0x73ae, 0x73f0, 0x7c10, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
// 'sardine1', 64x32px
const uint16_t myBitmapsardine1 [] PROGMEM = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7bcf, 0x7bef, 0x73ad, 0x736d, 0x6b4d, 0x7baf, 0xa534, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b4d, 0x7bef, 0x8451, 0x73ad, 0x6b4c, 0x630b, 0x62ea, 0x632c, 0x7bef, 0x630b, 0x630b, 
	0x83f0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c71, 0x8c50, 0x8c71, 0x9492, 0x94b2, 0x8c51, 0x7bce, 0x6b6d, 0x5b0b, 0x5aaa, 0x5288, 
	0x630b, 0x6b6d, 0x62ec, 0x632d, 0x8c71, 0xb5b7, 0xb5b7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x9d14, 0x8c92, 0x94b3, 0x94b2, 0x9cf3, 0x9492, 0x9491, 0xa534, 0x8c51, 0x9471, 0x8c51, 0x842f, 
	0x7bcf, 0x6b4c, 0x5aaa, 0x5aca, 0x630b, 0x6b4c, 0x630b, 0x7bce, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xbdf7, 0x9d13, 0x9cd3, 0xa514, 0xadb7, 0xa514, 0x7bcf, 0xce58, 0x9471, 0xa514, 0xa514, 0x7bce, 0x94b2, 
	0x8451, 0x8c70, 0x8c30, 0x9471, 0x73ae, 0x62eb, 0x5aaa, 0x7bae, 0x7bae, 0x7bae, 0x7bae, 0x94d3, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xce59, 0xad95, 0xa534, 0xa534, 0xad55, 0x94d2, 0x9d13, 0x94d4, 0x9cd3, 0x7bef, 0xce59, 0x8451, 0x9492, 0x9cd2, 
	0x9472, 0x6b8d, 0x7bce, 0x8c70, 0x9491, 0x9471, 0x83ef, 0x7bce, 0x62eb, 0x630b, 0x7bce, 0x738d, 0x738e, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xbdb7, 0xad55, 0xa514, 0xbe17, 0x94d3, 0x9cf3, 0x9cf3, 0x9cd2, 0x9cf3, 0x9cf3, 0xa534, 0x9492, 0xb596, 0x8431, 
	0x94b2, 0xa514, 0x7bef, 0x9cd2, 0x840f, 0x83ef, 0x840f, 0x62eb, 0x5aaa, 0x62ea, 0xd679, 0x5289, 0x52c9, 0x840f, 0x840f, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0xc619, 0xb596, 0xa514, 0xad76, 0x9cf3, 0x9cf3, 0x9cf3, 0x94d3, 0x9cd2, 0xa514, 0x9d14, 0xa534, 0x9d14, 0xa534, 0x9cf3, 
	0x9cf3, 0x9472, 0x9471, 0x9cf2, 0x5aeb, 0x736c, 0x5aaa, 0x62ca, 0x5a8a, 0x4a48, 0xd699, 0x842f, 0x6b6d, 0x4226, 0x73ce, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0xb596, 0xad35, 0x9cf4, 0xad55, 0x9cd3, 0x94d3, 0x9cd2, 0x9cf3, 0x9d13, 0x9cd3, 0xa514, 0x94d3, 0x9d13, 0xa514, 0x9cf3, 
	0xa4f3, 0x9cf3, 0x8c71, 0x5aca, 0x5aeb, 0x5aaa, 0x5a89, 0xa4f3, 0x5a8a, 0x5269, 0xd659, 0x840f, 0x9471, 0x62ca, 0x5248, 0x6b2c, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0xb5b6, 0xad34, 0xa4f3, 0xa534, 0xa534, 0x9cf4, 0x9cf3, 0x9d14, 0x9cf3, 0x9cd3, 0x9cf3, 0xa514, 0x9cf4, 0x9cf3, 0x9d14, 0x9cf3, 
	0xa4f3, 0xa534, 0x5269, 0x52aa, 0x736d, 0x5248, 0x632c, 0x8410, 0x5a8a, 0x83cf, 0x62eb, 0x8c30, 0x9cb3, 0x7bad, 0x4a07, 0x734c, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xbdb6, 
	0x9cf3, 0xa4f3, 0xa534, 0x9cf5, 0xa534, 0x8c72, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cd2, 0x9d14, 0xa514, 0x9cf5, 0x9cd2, 0x9cf3, 0x9cb3, 
	0x9cd2, 0x7bee, 0x5289, 0x5268, 0x4a28, 0x4a48, 0x7bae, 0x5268, 0xc5d7, 0xc638, 0x4a69, 0xc617, 0x9451, 0x9450, 0x4a06, 0x5a8a, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9cf3, 
	0x9cf3, 0x9cf3, 0xa514, 0xa534, 0x9cf3, 0x9d13, 0xbdf9, 0x8450, 0x94b2, 0xa514, 0x94d3, 0x9cf4, 0x9cd2, 0x9cb3, 0x9cd3, 0x9cb3, 
	0x9492, 0x7bef, 0x62eb, 0x62aa, 0x5aa9, 0x5aaa, 0x5a89, 0x4a48, 0x734c, 0xce79, 0x842f, 0xa513, 0x18a2, 0x83ce, 0x41a5, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c52, 
	0x94b2, 0x9cd2, 0x9cd2, 0xa514, 0xa534, 0xbdf7, 0xa534, 0x94b2, 0xce79, 0x94b3, 0x94d3, 0xa554, 0x9493, 0x9cd3, 0x94b2, 0x9472, 
	0x8c71, 0x8410, 0x62eb, 0x62ea, 0x6b0b, 0x5aaa, 0x6b2b, 0x5248, 0x62ca, 0x5aeb, 0xd679, 0xc658, 0x2103, 0x5a89, 0x49e5, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7bf0, 
	0x9471, 0x8c51, 0x9491, 0xa514, 0x9cf3, 0x9cf3, 0x94d2, 0xa514, 0x9cf3, 0x8451, 0xc659, 0x9cf3, 0x9cd2, 0xb595, 0x8430, 0x83f0, 
	0x8c50, 0x7bae, 0x738d, 0x736c, 0x736c, 0x6b2c, 0x6b2c, 0x9cd2, 0x630b, 0x6b4c, 0x7bae, 0x8c30, 0x4207, 0x41c5, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8431, 
	0x630c, 0x738e, 0x8c71, 0x8c71, 0x8c71, 0x9cd3, 0x8c50, 0x8c70, 0x8431, 0x8c71, 0x9cf3, 0x7bef, 0x9cf3, 0xa513, 0x73ad, 0x9cd3, 
	0x738e, 0x5acb, 0x6b4c, 0x8c2f, 0x7b8d, 0x7b8d, 0x7bad, 0x6b2b, 0x7bce, 0x83ad, 0xad34, 0x41c5, 0x7b6c, 0x41e5, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c51, 
	0x6b6d, 0x5aec, 0x5aeb, 0x630c, 0x7bcf, 0x9491, 0x9471, 0x9491, 0x8c51, 0x8c52, 0x7bcf, 0x738e, 0x9470, 0x630b, 0x738d, 0x7bcf, 
	0x5aca, 0x8c50, 0x6b4c, 0x83ef, 0x736d, 0x840f, 0x630b, 0x8c2f, 0x840f, 0x8c4f, 0x8c2f, 0x6b4c, 0x5aa8, 0x5227, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x8431, 0x630c, 0x5aec, 0x62eb, 0x630b, 0x630c, 0x632c, 0x738d, 0x7bf0, 0x8410, 0x7bf0, 0x7bcf, 0x738d, 0x7bcf, 0x8430, 0x6b6d, 
	0x840f, 0xa534, 0x5aaa, 0x7bcf, 0x83ee, 0x5aaa, 0x8c50, 0x8c30, 0x83ee, 0x7bce, 0xb595, 0xa513, 0x4a47, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x73af, 0x630c, 0x630c, 0x5b0c, 0x5b0b, 0x632c, 0x5aec, 0x634c, 0x632c, 0x6b6d, 0x6b8e, 0x738d, 0x632c, 0x630c, 0x6b6e, 
	0x6b6d, 0x73cf, 0x8410, 0x738e, 0x840f, 0x83ef, 0x840f, 0x630b, 0xad55, 0xb555, 0xad55, 0x7bee, 0x5a88, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x7baf, 0x630c, 0x630c, 0x62eb, 0x5b0c, 0x5acb, 0x632c, 0x5aeb, 0x630c, 0x630c, 0x630c, 0x6b6d, 0x736e, 0x8410, 
	0x9492, 0x9cf3, 0x8c71, 0x840f, 0x736d, 0x7bce, 0x7bef, 0xa534, 0xa513, 0xa514, 0x9cb2, 0x5289, 0x9cf3, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x73af, 0x6b6d, 0x5b0b, 0x52ca, 0x630c, 0x5acb, 0x5aec, 0x5b0c, 0x5aeb, 0x6b4d, 0x62ec, 0x634c, 
	0x634c, 0x7bef, 0x9cd2, 0xa4f3, 0x9491, 0xa514, 0x9cf3, 0x9cf3, 0xa4f3, 0x9cb3, 0x52aa, 0x94b2, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b6e, 0x6b4d, 0x5acc, 0x5acc, 0x5aec, 0x5acc, 0x6b4d, 0x5aec, 0x632d, 
	0x630c, 0x632d, 0x6b6d, 0x73ae, 0x6b6d, 0x8c70, 0x9cf3, 0x9cd2, 0x8430, 0x8451, 0x8451, 0x8c92, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7bcf, 0x7baf, 0x6b6e, 0x630c, 0x632c, 0x5aeb, 0x632d, 
	0x630c, 0x6b6e, 0x736e, 0x6b6d, 0x738e, 0x6b8e, 0x73ad, 0x73ae, 0x73af, 0x7bf0, 0x8431, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x73af, 0x73af, 0x6b8e, 0x632c, 
	0x5aec, 0x632d, 0x6b4d, 0x6b6d, 0x738e, 0x738e, 0x73ae, 0x73ae, 0x7bef, 0x8411, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x73d0, 0x73af, 0x6b4d, 0x632d, 0x6b6e, 0x6b8e, 0x73d0, 0x7bf0, 0x8431, 0x8cb2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};
// 'sardine0', 64x32px
const uint16_t myBitmapsardine0 [] PROGMEM = {
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738e, 0x7bcf, 0x7bef, 0x738e, 0x6b6d, 0x6b4d, 0x6b6e, 0x94b3, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738e, 0x8410, 0x8450, 0x7bae, 0x6b4c, 0x630b, 0x5aeb, 0x5b0b, 0x6b6d, 0x736d, 0x5aec, 
	0x6b8e, 0xad34, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x94b2, 0x9471, 0x8c71, 0x94b2, 0x9471, 0x9491, 0x83ef, 0x736d, 0x630b, 0x5aca, 0x5289, 
	0x5aeb, 0x736d, 0x6b2d, 0x5aec, 0x8c31, 0xad56, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x9d13, 0x9492, 0x94d3, 0x94b2, 0x9cf3, 0x9471, 0x9492, 0xa513, 0x8410, 0x8c71, 0x8c51, 0x8430, 
	0x7bcf, 0x6b4c, 0x5aaa, 0x5aaa, 0x630c, 0x738d, 0x630b, 0x6b4d, 0x9cb2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0xbdf7, 0xa513, 0x9cf4, 0x9cf3, 0xad75, 0xa514, 0x7bcf, 0xc638, 0x8c71, 0x9cd2, 0x9cd2, 0x738d, 0x9471, 
	0x8c71, 0x8c71, 0x8c51, 0x9471, 0x73ae, 0x62eb, 0x5289, 0x5aeb, 0x738d, 0x630c, 0x738f, 0x9492, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xce59, 0xad95, 0xa534, 0x9d14, 0xa534, 0x94b2, 0x9cf3, 0x94b3, 0x9cd3, 0x7bef, 0xc618, 0x8430, 0x8c51, 0x9492, 
	0x8c50, 0x736d, 0x7bef, 0x8c30, 0x94b2, 0x94b2, 0x8c51, 0x7bcf, 0x5aca, 0x52a9, 0x632b, 0x6b4d, 0x738e, 0x94b3, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0xbdb7, 0xad75, 0xa514, 0xbdf7, 0x94d2, 0x94d3, 0x9cd3, 0x9cd2, 0x94b2, 0x94d3, 0x9cd3, 0x94b2, 0xad34, 0x8c50, 
	0x8450, 0xa514, 0x7bce, 0x8c71, 0x7bce, 0x9491, 0x8410, 0x83ef, 0x83ef, 0x83ef, 0x736d, 0x5269, 0x5aaa, 0x7c0f, 0x7bef, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0xc619, 0xb596, 0xa534, 0xad75, 0x94d3, 0x9cf3, 0x9cf3, 0x94b2, 0x94b2, 0x9cd3, 0x9cd3, 0x94b3, 0x9cf3, 0x9cf3, 0x94d3, 
	0x9cf3, 0x9492, 0x8c51, 0x9d13, 0x73ce, 0x9cf2, 0x83ef, 0x7bef, 0x8c92, 0x8c71, 0x8410, 0x7bcf, 0x630b, 0x4227, 0x83ef, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0xce59, 0xb596, 0xad56, 0x9cf3, 0xad55, 0x9cf3, 0x9cf3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cb2, 0x9cf3, 0x9cf3, 0x94d3, 0x9cb2, 0x9cf3, 
	0x9cd3, 0x9cd3, 0x9cd2, 0x94b2, 0x94b2, 0x94b2, 0x5b0b, 0xb5b6, 0x8c50, 0x5289, 0x8c50, 0x8410, 0x83cf, 0x41e6, 0x4a28, 0x736d, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xd6ba, 
	0xb596, 0xad34, 0xa514, 0xa534, 0xa534, 0xa514, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cd3, 0x9cd3, 0x9cf3, 0x9cf3, 0x9cd3, 0xa4f4, 0x9cf3, 
	0x9cd3, 0x9cd3, 0x8c51, 0x5aeb, 0x7bef, 0x528a, 0x52aa, 0x9cd2, 0x9471, 0x94b2, 0x94b2, 0x9471, 0x8c51, 0x6b2b, 0x4a07, 0x736d, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xbdb6, 
	0x9cf3, 0x9d13, 0xad75, 0x9cf3, 0xa535, 0x8c71, 0x9cf3, 0x9cf3, 0xa4f4, 0x9cd3, 0xa514, 0xa514, 0x9cf3, 0x9cf3, 0x9cf3, 0x9d13, 
	0x94b2, 0x83ef, 0x62eb, 0xa554, 0x9471, 0x632c, 0x4248, 0x6b2c, 0x4a28, 0x6b2c, 0x7bae, 0x9cb2, 0x9471, 0x7bad, 0x49e6, 0x5aaa, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9d13, 
	0x9cf3, 0xa513, 0xa513, 0xa534, 0x9cf3, 0x9d14, 0xbdf7, 0x8c71, 0x94b2, 0xa534, 0x9cf3, 0x9d14, 0x9cd3, 0x9cf3, 0xa534, 0x9d13, 
	0x9491, 0x3986, 0xc618, 0x9cf3, 0x9cd2, 0x9491, 0x8430, 0x4a28, 0x9cb2, 0x4a08, 0x736d, 0x5268, 0x8430, 0x6b0b, 0x41c5, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c71, 
	0x94b2, 0x9cf3, 0x9cd2, 0xa534, 0xa534, 0xbdf7, 0xa534, 0x94b2, 0xc659, 0x9492, 0x94d3, 0xa534, 0x94b2, 0xa514, 0x9cf3, 0x9d13, 
	0x8c70, 0x4207, 0x83cf, 0x9cd2, 0x7bce, 0x9491, 0x4a27, 0x630b, 0x4a48, 0x6b2c, 0x736d, 0x6b2c, 0x9471, 0x5227, 0x49c5, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8431, 
	0x8c51, 0x9492, 0x9cf3, 0x9cf3, 0xad55, 0x9cf3, 0x94d3, 0xad75, 0xa514, 0x8c91, 0xc638, 0x94b2, 0xa514, 0xc618, 0x8c51, 0x8450, 
	0x9cd2, 0x39c6, 0x7b8d, 0x5289, 0x8410, 0xbdd6, 0x4207, 0xe71b, 0x4a28, 0x5aca, 0x83ce, 0x4a28, 0xbd95, 0x41a5, 0x62aa, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8c51, 
	0x632d, 0x6b8d, 0x8c71, 0x94b2, 0x9cd3, 0xad54, 0xa534, 0x9cf3, 0x9cf3, 0x9cf3, 0xad75, 0x8410, 0xb596, 0xad75, 0x8c71, 0xc5f7, 
	0x9cb2, 0x8c50, 0x4a48, 0x4a28, 0x5289, 0x4a28, 0x5aaa, 0x5aaa, 0x5289, 0x5269, 0x5a89, 0x83ef, 0x5a89, 0x49c6, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x6b6d, 0x630c, 0x630c, 0x62eb, 0x7bef, 0x94b2, 0xa514, 0x9d13, 0x9d14, 0x9d14, 0xa514, 0x9d14, 0xa554, 0x738e, 0xa514, 0xb596, 
	0x738e, 0xb5b6, 0xad34, 0x8c51, 0xce59, 0x8c50, 0x9471, 0x738e, 0x7bcf, 0x7bcf, 0x8c0f, 0x8c0f, 0x41c6, 0x41a5, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x630c, 0x630c, 0x5b0b, 0x5b0b, 0x632c, 0x5b0b, 0x738d, 0x9492, 0x9cd3, 0x9cd3, 0xa514, 0x9d13, 0xa514, 0xa534, 0x9492, 
	0xa534, 0xd679, 0x8c30, 0xad34, 0xbdf7, 0x94b2, 0x6b6d, 0x94b2, 0x9cb2, 0x9492, 0x9471, 0x83ef, 0x41e6, 0x6b4c, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x632d, 0x630c, 0x5b0c, 0x630b, 0x632d, 0x630c, 0x6b4d, 0x630c, 0x738e, 0x94b2, 0x9492, 0x9cf3, 0xa514, 0xa534, 
	0x9d14, 0x9cf4, 0xa4f3, 0xa534, 0x9492, 0xa534, 0x9cb2, 0x9cb2, 0x94b2, 0x9cd2, 0x9cb2, 0x62ca, 0x39a4, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x6b4d, 0x632d, 0x630c, 0x632d, 0x630c, 0x6b4d, 0x62eb, 0x632c, 0x632c, 0x632d, 0x6b6d, 0x8c30, 0x9cf3, 
	0x9cd3, 0xa514, 0x9cf3, 0x9cf3, 0x9cf3, 0xa4f3, 0x9cd2, 0x9cf3, 0x94b2, 0x9492, 0x8c30, 0x41e7, 0xad55, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738e, 0x632c, 0x5acb, 0x632d, 0x5acb, 0x630c, 0x632c, 0x5b0b, 0x6b4d, 0x632c, 0x6b4d, 
	0x6b8e, 0x8c51, 0x94d3, 0x9d13, 0x8c71, 0x9d13, 0x9cd2, 0x9cd2, 0x94b2, 0x8c91, 0x52a9, 0x8c51, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738f, 0x630c, 0x630c, 0x630c, 0x5aec, 0x6b4d, 0x630c, 0x632d, 
	0x6b6e, 0x6b6e, 0x6b6d, 0x73ae, 0x6b6d, 0x8c71, 0x9cd3, 0x9492, 0x8430, 0x8c71, 0x8471, 0x8c92, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738e, 0x6b2d, 0x632c, 0x5aeb, 0x632d, 
	0x632d, 0x6b4d, 0x736e, 0x6b8d, 0x738e, 0x738d, 0x73ae, 0x73ce, 0x73ce, 0x7bf0, 0x8431, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6b4d, 
	0x630c, 0x632d, 0x6b6d, 0x736d, 0x738e, 0x73ae, 0x73ae, 0x73cf, 0x7bef, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x6b6e, 0x6b4d, 0x6b8e, 0x73af, 0x73d0, 0x7c11, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

// PARTY BUTTON
// 'party button', 64x32px
const uint16_t _party_button [] PROGMEM = {
	0x8410, 0x8410, 0x8430, 0x8431, 0x8431, 0x8c51, 0x8c51, 0x8c51, 0x8c72, 0x9492, 0x9492, 0x8c92, 0x94b2, 0x9492, 0x9492, 0x94b3, 
	0x94b3, 0x94b3, 0x9cd3, 0x94b3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cf4, 0x9cf4, 0x9cf4, 0x9cf4, 0x9d14, 0x9cf4, 0x9d14, 
	0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0xa535, 0x9d14, 0xa534, 0xa535, 0xa535, 0xa535, 0xa535, 0xa535, 
	0x7bf0, 0x4249, 0x9d14, 0xa534, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9cf4, 0x9cf4, 0x9cf4, 0x94d3, 0x94d3, 0x94b3, 
	0x8410, 0x8410, 0x8431, 0x8431, 0x8c51, 0x8c51, 0x8c51, 0x8c71, 0x8c71, 0x8c72, 0x9492, 0x94b2, 0x94b2, 0x94b2, 0x94b3, 0x94b3, 
	0x94d3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd3, 0x9cd4, 0x9cd3, 0x9cd3, 0x9cf4, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 0x9d14, 
	0x9d14, 0x9d14, 0xa534, 0x9d14, 0x9d14, 0x9d14, 0xa535, 0xa535, 0xa535, 0xa555, 0xa535, 0xa534, 0xa535, 0xa514, 0xa535, 0xa535, 
	0x6b4d, 0x4229, 0x6a4b, 0x4906, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x40a6, 0x40c6, 0x48e6, 
	0x8431, 0x8431, 0x8431, 0x8c51, 0x8c51, 0x8c51, 0x8c71, 0x8c71, 0x8c72, 0x9492, 0x9492, 0x94b2, 0x94b3, 0x94b3, 0x94b3, 0x94b3, 
	0x9cd3, 0x9cd3, 0x94b2, 0x9cd3, 0x9cd3, 0x9cf3, 0x9cf3, 0x9cf4, 0x9cd4, 0x9cf4, 0xa514, 0x9452, 0x732e, 0x4906, 0x48c6, 0x48c6, 
	0x50c6, 0x50c6, 0x50e6, 0x48c6, 0x48a6, 0x48a6, 0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50e6, 0x50e6, 0x50e6, 0x5107, 
	0x38c5, 0x39c8, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48e6, 0x40c6, 0x40c6, 0x40c6, 
	0x8bf0, 0x8c31, 0x8c31, 0x8410, 0x6aec, 0x38e5, 0x38a4, 0x3864, 0x4085, 0x4085, 0x4085, 0x4085, 0x4085, 0x4085, 0x4085, 0x4085, 
	0x4085, 0x4085, 0x40a6, 0x40a5, 0x48c6, 0x40a6, 0x40a6, 0x48a5, 0x48a5, 0x48a5, 0x48a5, 0x50a5, 0x50c6, 0x50c6, 0x50c6, 0x50a5, 
	0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50a5, 0x50a6, 0x50a5, 0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50c6, 0x50e6, 0x50e6, 0x50c6, 
	0x30e5, 0x39c8, 0x50e6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x40c6, 
	0x3844, 0x4044, 0x4064, 0x4044, 0x4064, 0x4064, 0x4064, 0x4064, 0x4044, 0x09ac, 0x09cd, 0x09ee, 0x120e, 0x0a0e, 0x09cd, 0x0a0e, 
	0x0a0e, 0x120e, 0x124f, 0x124f, 0x126f, 0x126f, 0x124f, 0x1a6e, 0x48a5, 0x48a5, 0x50a5, 0x50a5, 0x50c6, 0x50a6, 0x50a5, 0x50c6, 
	0x58c6, 0x50c6, 0x50c6, 0x50a6, 0x58c6, 0x50c6, 0x58e6, 0x58e6, 0x58c6, 0x50c6, 0x50c6, 0x58e6, 0x58e6, 0x50e6, 0x50c6, 0x50c6, 
	0x3926, 0x41c8, 0x48c6, 0x48c6, 0x50c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48a6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x40a6, 
	0x4064, 0x4064, 0x4064, 0x4064, 0x4064, 0x4064, 0x4064, 0x4064, 0x4064, 0xad76, 0x124f, 0x0a0e, 0x0a0e, 0x0a0d, 0x32f0, 0x5bd2, 
	0x8494, 0x94d4, 0x9cf4, 0x9cf4, 0xa515, 0xa535, 0xa515, 0x9cd4, 0x50a5, 0x4885, 0x50a5, 0x50c6, 0x58c6, 0x50c6, 0x58c6, 0x58c6, 
	0x58a6, 0x58c6, 0x58e6, 0x58e7, 0x58c6, 0x58c6, 0x58c6, 0x58e6, 0x58c6, 0x58e6, 0x58e6, 0x50e6, 0x58e6, 0x58e6, 0x50e6, 0x50c6, 
	0x41a7, 0x3146, 0x48c6, 0x50e7, 0x48c6, 0x50c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 
	0x4084, 0x4865, 0x4865, 0x4864, 0x4865, 0x4885, 0x4864, 0x4065, 0x4064, 0xad76, 0x0000, 0xad76, 0x94d3, 0x9cf4, 0x8c72, 0x0000, 
	0x9cf4, 0xad76, 0x0000, 0x0000, 0x0000, 0x0000, 0xa535, 0xa4f4, 0x50a5, 0x50a6, 0x50c6, 0x50c6, 0x50c6, 0x58c6, 0x58c6, 0x58c6, 
	0x58c6, 0x58c6, 0x58c6, 0x58e6, 0x58e6, 0x58e7, 0x58e6, 0x58e6, 0x58e7, 0x58c6, 0x58e6, 0x58e6, 0x58c6, 0x58e6, 0x58e6, 0x5906, 
	0x41e8, 0x3946, 0x50e6, 0x50c6, 0x50c6, 0x50c6, 0x50e6, 0x50e6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x48c6, 0x40a5, 
	0x8c6f, 0x73d2, 0x7391, 0x4885, 0x4885, 0x4885, 0x4865, 0x4885, 0x4885, 0xad76, 0x0000, 0x0000, 0xad76, 0x9cf4, 0x9cf4, 0x0000, 
	0xad76, 0x0000, 0xa515, 0xa514, 0xa535, 0xa535, 0x0000, 0xa535, 0x50a5, 0x50c6, 0x50a5, 0x50c6, 0x58c6, 0x58c6, 0x58e6, 0x58c6, 
	0x60e6, 0x58c6, 0x60e7, 0x58c6, 0x58e7, 0x58c6, 0x58e7, 0x58e7, 0x58e7, 0x58e6, 0x5907, 0x58e6, 0x58e7, 0x58e6, 0x58e7, 0x58e6, 
	0x014b, 0x114a, 0x50e6, 0x50e6, 0x50e6, 0x50e7, 0x50e6, 0x50e6, 0x48c6, 0x50c6, 0x50c6, 0x50e6, 0x50e6, 0x48c6, 0x48c6, 0x48c6, 
	0x7383, 0x192a, 0x2022, 0x3823, 0x4044, 0x4864, 0x4865, 0x4885, 0x4885, 0xad76, 0x0000, 0xad76, 0x0000, 0xad76, 0xad76, 0x0000, 
	0xad76, 0x0000, 0xad76, 0xad76, 0xad76, 0xad76, 0x0000, 0xa555, 0x50a6, 0x50c6, 0x58c6, 0x58c6, 0x58c6, 0x58c6, 0x58c6, 0x58e6, 
	0x58e6, 0x58e6, 0x58e6, 0x6127, 0x58e6, 0x58e7, 0x58e6, 0x6107, 0x6107, 0x6128, 0x58e6, 0x58e6, 0x58e6, 0x58e7, 0x58e6, 0x5907, 
	0x11ee, 0x096b, 0x5107, 0x5106, 0x5927, 0x69ea, 0x7a8c, 0x724c, 0xa473, 0xad15, 0xa515, 0xa514, 0x9d14, 0x9cf4, 0x9d14, 0x9cf4, 
	0x2a04, 0x2025, 0x61e4, 0x51a3, 0x49a4, 0x3964, 0x3123, 0x6aeb, 0x9471, 0x8c30, 0x0000, 0xad76, 0xad76, 0x0000, 0xad76, 0x0000, 
	0xa534, 0x0000, 0xad76, 0xad76, 0xad56, 0xad76, 0x0000, 0xad76, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 0xad75, 
	0xad75, 0xb596, 0xb596, 0xb596, 0xb596, 0xad96, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xad96, 0xad96, 
	0x0a0e, 0x3a4d, 0xa555, 0xad76, 0xad76, 0xad75, 0xa555, 0xa555, 0xa555, 0xa535, 0xa535, 0xa535, 0xa535, 0x9d14, 0x9d14, 0x9d14, 
	0x3045, 0x5083, 0x4040, 0x3840, 0x3860, 0x2840, 0x3041, 0x6084, 0x70e6, 0xa514, 0x0000, 0xa514, 0xa515, 0xad35, 0x0000, 0x0000, 
	0xa535, 0x0000, 0xad55, 0xad55, 0xad56, 0xad76, 0x0000, 0xad76, 0x9948, 0x9148, 0x9148, 0x9969, 0x9148, 0x9969, 0x9969, 0x9969, 
	0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9989, 0x9989, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9169, 0x9169, 0x9168, 
	0x0a0d, 0x5987, 0x8948, 0x8948, 0x8948, 0x8949, 0x8948, 0x8928, 0x8948, 0x8948, 0x8928, 0x8128, 0x8128, 0x8128, 0x8128, 0x8128, 
	0x78e6, 0x5042, 0x4821, 0x4041, 0x3820, 0x3020, 0x4041, 0x70a5, 0x78c6, 0xa514, 0x0000, 0xa535, 0xa514, 0xad55, 0xad35, 0x0000, 
	0xad35, 0xad55, 0x0000, 0x0000, 0x0000, 0x0000, 0xad76, 0xad76, 0x9128, 0x9948, 0x9948, 0x9948, 0x9969, 0x9969, 0x9969, 0x9969, 
	0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0x9169, 0x9169, 0x9169, 
	0x5289, 0x5106, 0x8928, 0x8948, 0x99aa, 0x8948, 0x8948, 0x8948, 0x8128, 0x8128, 0x8128, 0x8148, 0x8148, 0x8128, 0x8128, 0x8128, 
	0x78e6, 0x5042, 0x4841, 0x4041, 0x3821, 0x3821, 0x6063, 0x78c6, 0x80e7, 0xad35, 0xa535, 0xa535, 0xa535, 0xad55, 0xa535, 0xad55, 
	0xad35, 0xad55, 0x4392, 0x0a90, 0xad76, 0xb596, 0xb596, 0xb596, 0x9128, 0x9948, 0x9148, 0x9968, 0x9969, 0x9969, 0x9948, 0x9969, 
	0x9969, 0x9969, 0xa169, 0x9969, 0x9969, 0x9969, 0xa169, 0x9969, 0x9989, 0x9969, 0x9969, 0x9969, 0x9169, 0x9169, 0x9169, 0x9168, 
	0x5aca, 0x5906, 0x8928, 0x8948, 0x9189, 0x8928, 0x8928, 0x8128, 0x8128, 0x8128, 0x8128, 0x8128, 0x8108, 0x8108, 0x8128, 0x7907, 
	0x70a5, 0x5042, 0x4021, 0x4021, 0x3820, 0x4841, 0x70a5, 0x78c6, 0x80e7, 0xad55, 0xa535, 0xa535, 0x0270, 0x0a90, 0x0270, 0x0a70, 
	0x0270, 0x0ab1, 0x0a70, 0x0a70, 0x1a8f, 0xad76, 0xb596, 0xb596, 0x9128, 0x9948, 0x9969, 0x9969, 0x9969, 0x9969, 0x9969, 0xa169, 
	0xa189, 0xa169, 0xa169, 0xa169, 0xa169, 0xa169, 0x9969, 0xa169, 0x9969, 0x9969, 0x9968, 0x9949, 0x9169, 0x9148, 0x9148, 0x9148, 
	0x4a48, 0x58e5, 0x8928, 0x8128, 0x8128, 0x8948, 0x8128, 0x8128, 0x8128, 0x8128, 0x8107, 0x8107, 0x8107, 0x7907, 0x7907, 0x7907, 
	0x68a5, 0x5042, 0x4021, 0x3820, 0x3821, 0x5843, 0x78c6, 0x80e7, 0x80e7, 0xad55, 0xad55, 0xad55, 0x94d4, 0x6c34, 0x4351, 0x2af0, 
	0x1aaf, 0x1ad0, 0x0250, 0x0a90, 0xb596, 0xb596, 0xb5b6, 0xb5b6, 0x9128, 0x9969, 0xa169, 0x9969, 0x9969, 0xa169, 0xa169, 0xa169, 
	0xa169, 0xa169, 0xa169, 0xa169, 0xa189, 0xa169, 0x9969, 0x9969, 0x9969, 0x9969, 0x9968, 0x9148, 0x9168, 0x9148, 0x9148, 0x8948, 
	0x4228, 0x60e6, 0x8107, 0x8128, 0x8107, 0x8108, 0x8128, 0x8127, 0x7907, 0x7907, 0x7907, 0x7907, 0x78e7, 0x7907, 0x78e7, 0x78e7, 
	0x6064, 0x5042, 0x4021, 0x3820, 0x4841, 0x7085, 0x80e7, 0x78c6, 0x8907, 0xad55, 0xad56, 0xad76, 0xad76, 0xad76, 0xad76, 0xb596, 
	0xb576, 0xb596, 0x0ad1, 0xb596, 0xb597, 0xb5b6, 0xb5b6, 0xb5b7, 0x9148, 0x9969, 0x9949, 0xa169, 0xa169, 0xa169, 0xa169, 0xa169, 
	0xa169, 0xa189, 0xa169, 0xa189, 0xa169, 0xa169, 0xa169, 0x9969, 0x9969, 0x9968, 0x9148, 0x9148, 0x9148, 0x8928, 0x8928, 0x8948, 
	0x4207, 0x5884, 0x7907, 0x78e7, 0x78e7, 0x78e7, 0x7907, 0x7907, 0x7907, 0x78e7, 0x78e6, 0x70e6, 0x78e6, 0x70e6, 0x70e6, 0x70e6, 
	0x5043, 0x4842, 0x3821, 0x3821, 0x6063, 0x78c6, 0x80e7, 0x80e7, 0x8907, 0xad56, 0xad56, 0xad56, 0xad76, 0xad56, 0xad55, 0xad76, 
	0xb576, 0xb596, 0xb576, 0xb596, 0xb597, 0xb5b6, 0xb596, 0xb596, 0x78e6, 0xa169, 0xa169, 0xa169, 0xa169, 0xa169, 0xa189, 0xa169, 
	0xa189, 0xa189, 0xa189, 0xa169, 0xa169, 0xa169, 0x9969, 0x9969, 0x9948, 0x9148, 0x9148, 0x9148, 0x8948, 0x8928, 0x8927, 0x8127, 
	0x39c7, 0x58a5, 0x78e6, 0x78e7, 0x78e7, 0x78e7, 0x78e6, 0x78e6, 0x70c6, 0x70c6, 0x70c6, 0x70c6, 0x70c6, 0x70e6, 0x70c6, 0x70c6, 
	0x4842, 0x4042, 0x3821, 0x4841, 0x70a5, 0x80e6, 0x8107, 0x80e7, 0x8908, 0x0a0f, 0x0a0e, 0x228f, 0x2aae, 0x5391, 0x7433, 0x9516, 
	0xad97, 0xad97, 0xad97, 0xb576, 0xad76, 0xb596, 0xb5b7, 0xb5b7, 0x9aed, 0xa169, 0xa169, 0xa169, 0xa169, 0xa169, 0xa189, 0xa189, 
	0xa189, 0xa189, 0xa169, 0xa189, 0xa169, 0xa169, 0x9969, 0x9968, 0x9968, 0x9148, 0x8928, 0x8927, 0x8928, 0x8927, 0x8127, 0x8107, 
	0x4228, 0x58a5, 0x70e6, 0x7907, 0x70c6, 0x70e6, 0x70c6, 0x70c6, 0x70c6, 0x68a5, 0x68c5, 0x68c5, 0x68a5, 0x68c5, 0x68a5, 0x68a5, 
	0x6249, 0x5206, 0x51c6, 0x836d, 0x9c31, 0xa411, 0x8a2a, 0x8a0b, 0x8148, 0x0a2f, 0x022f, 0x0a4f, 0x0a50, 0x0a4f, 0x0a2f, 0x0a50, 
	0x022f, 0x0a70, 0x0a70, 0x0a70, 0x0a70, 0x0a91, 0x0250, 0x0250, 0x0ab1, 0xa169, 0xa189, 0xa189, 0xa189, 0xa189, 0xa189, 0xa18a, 
	0xa189, 0xa189, 0xa189, 0xa189, 0xa169, 0x9969, 0x9969, 0x9948, 0x9148, 0x9148, 0x9148, 0x8928, 0x8927, 0x8107, 0x8927, 0x8127, 
	0x6b8e, 0x58c5, 0x70e6, 0x70e6, 0x70c6, 0x68c6, 0x70c6, 0x68c5, 0x68a5, 0x68a5, 0x68a5, 0x6085, 0x60a5, 0x60a5, 0x60a5, 0x60a5, 
	0x5207, 0x5207, 0x6aea, 0x8c30, 0x9cf3, 0xa514, 0xa514, 0xad55, 0xad75, 0xad76, 0xb596, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 
	0xb5b6, 0xb5b6, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdd7, 
	0xbdd7, 0xbdf7, 0xbdd7, 0xbdd6, 0xbdb6, 0xb596, 0xbd55, 0xc515, 0x924b, 0x7968, 0x8128, 0x8148, 0x8969, 0x8989, 0x89ca, 0x938f, 
	0x2124, 0x48e5, 0x7927, 0x7107, 0x70e6, 0x70e6, 0x68c6, 0x68a5, 0x68a5, 0x60a5, 0x60a5, 0x60a5, 0x6084, 0x60a5, 0x60a5, 0x5884, 
	0x3103, 0x732c, 0x83ef, 0x9cd3, 0xa514, 0xa535, 0xa534, 0xad55, 0xad76, 0xb596, 0x4a68, 0xa533, 0xb5b6, 0xb5b6, 0xbdf7, 0xbdd7, 
	0xbdf7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdf7, 
	0xc618, 0xbdf7, 0xbdd7, 0xb5b6, 0xb5b6, 0xb596, 0xad96, 0xad76, 0xad75, 0xa554, 0xa554, 0xa534, 0xa514, 0x73ef, 0x5aec, 0x52ec, 
	0x5aec, 0x4aaa, 0x4a49, 0x4a49, 0x7bcf, 0x7bef, 0x7bef, 0x7bef, 0x7bcf, 0x7bcf, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x738e, 
	0xa514, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb596, 0x8430, 0x4a28, 0x630a, 0x842f, 0x5aeb, 0x9492, 0x2945, 0x0000, 
	0x52aa, 0xbdd7, 0x632c, 0x7bef, 0xad55, 0xbdd7, 0xc618, 0xbdf7, 0xbdd7, 0xb5b6, 0xbdd7, 0xad75, 0xb5b6, 0xbdf7, 0xbdf7, 0x4a69, 
	0x7bcd, 0xbdf7, 0xbdd7, 0xb5b6, 0xb5b6, 0xad96, 0xad76, 0xad75, 0xad75, 0xa554, 0xa534, 0xa514, 0xa514, 0x52cb, 0x52eb, 0x4a8a, 
	0x4249, 0x3a08, 0x4269, 0x4249, 0x4249, 0x738e, 0x73ce, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x73ae, 0x738e, 0x6b8e, 
	0x39a6, 0x7bcf, 0x5acb, 0xb596, 0xb596, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b7, 0xb5b7, 0xb5b7, 0xb5b7, 0xb5b7, 0xb5b6, 0xb5b6, 
	0xb5b6, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 
	0xbdf7, 0x7bcf, 0xbdd7, 0xb5b6, 0xb596, 0xad96, 0xad55, 0xad55, 0xa555, 0xa534, 0xa514, 0x9d14, 0x9cf3, 0x52ec, 0x1904, 0x0020, 
	0x1041, 0x0000, 0x0882, 0x4229, 0x4a6a, 0x6b6d, 0x738e, 0x73ae, 0x738e, 0x738e, 0x738e, 0x738e, 0x6b8e, 0x6b6d, 0x6b6d, 0x6b6d, 
	0xb596, 0xb596, 0xb5b6, 0xb596, 0xb5b6, 0xb596, 0xb5b6, 0xb5b7, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 
	0xb5b6, 0xb5b6, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xad95, 0xb5b6, 0xad96, 0xad75, 0xad55, 0xa555, 0xa534, 0xa514, 0x9d14, 0x9cf3, 0x5b0c, 0x4229, 0x1841, 
	0xf803, 0x1841, 0x4229, 0x2124, 0x52aa, 0x6b6d, 0x73ae, 0x738e, 0x738e, 0x6b8e, 0x6b8e, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b4d, 0x6b6d, 
	0xb5b6, 0xb5b6, 0xb5b6, 0xb5b7, 0xb5b7, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb596, 0xb5b6, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xb5b6, 0xb5b6, 0xb5b6, 0xa534, 0xb596, 0xad95, 0xad55, 0xa534, 0xa514, 0xa514, 0x9cf3, 0x9cf3, 0x4229, 0x4a6a, 0xf803, 
	0x1821, 0xf803, 0x39c7, 0x52ab, 0x52aa, 0x634c, 0x6b8d, 0x6b6d, 0x6b8d, 0x6b6d, 0x6b6d, 0x6b6d, 0x634d, 0x6b4d, 0x634c, 0x6b4d, 
	0xb5b6, 0xb5b6, 0xb5b7, 0xb5b7, 0xb5b7, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xb5b6, 0xb5b6, 0xbdd7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xb5b6, 0xb5b6, 0xb596, 0xb596, 0xad75, 0xad75, 0xad55, 0xa534, 0xa534, 0xa514, 0x9d14, 0x9cf3, 0x4a8a, 0x4aab, 0x1841, 
	0xf803, 0x1841, 0x39e8, 0x31a6, 0x52ab, 0x6b4d, 0x6b4d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b4d, 0x6b4d, 0x6b4d, 0x634c, 0x632c, 0x634d, 
	0xb5b6, 0xb5b6, 0xb5b6, 0xb5b7, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xb5b6, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xbdd7, 0xb5b6, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xb5b6, 0xb5b6, 0xb596, 0xb576, 0xad95, 0xa534, 0xad75, 0xad55, 0xa534, 0xa514, 0x9d13, 0x9cd3, 0x52cb, 0x3186, 0x632d, 
	0x2944, 0x4208, 0x4249, 0x4228, 0x5aec, 0x52aa, 0x6b4d, 0x6b8d, 0x6b8d, 0x6b6d, 0x6b4d, 0x6b4d, 0x634c, 0x634d, 0x6b4d, 0x634c, 
	0xb596, 0xb5b6, 0xb5b6, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xb5b6, 0xb5b6, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xb5b6, 0xb5b6, 0xb596, 0xad96, 0xad75, 0xad75, 0x8c71, 0xad75, 0xa534, 0xa514, 0x9d13, 0x9cf3, 0x1904, 0x52aa, 0x2945, 
	0x3186, 0x31a7, 0x4a69, 0x31a7, 0x5aeb, 0x632c, 0x6b8e, 0x738e, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b6d, 0x634d, 0x632c, 0x634d, 0x634c, 
	0xb596, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xb5b6, 0xb596, 0xb596, 0xb596, 0xad75, 0xad75, 0xad55, 0x8430, 0xa534, 0xa535, 0x9cf4, 0x9cf4, 0x94d3, 0x94b3, 0x8c72, 
	0x632c, 0x52aa, 0x738e, 0x630c, 0x6b6d, 0x73ae, 0x73ae, 0x73ae, 0x738e, 0x6b8d, 0x6b6d, 0x6b6d, 0x6b6d, 0x6b4d, 0x632c, 0x6b4d, 
	0xb596, 0xb596, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xbdd7, 0xb5b6, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdf7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xb5b6, 0xb5b6, 0xb596, 0xb596, 0xad55, 0xad55, 0xa555, 0xa554, 0xa555, 0x7bcf, 0xa514, 0x9d14, 0x9cf3, 0x94b3, 0x9492, 
	0x8c51, 0x8c51, 0x8430, 0x8410, 0x7bf0, 0x7bef, 0x73cf, 0x73ae, 0x73ae, 0x738e, 0x6b8e, 0x6b8d, 0x6b6d, 0x6b6d, 0x634d, 0x634c, 
	0xb596, 0xb596, 0xb5b6, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 
	0xb5b6, 0xb5b6, 0xb596, 0xad75, 0xad55, 0xad55, 0xa534, 0xa534, 0xa514, 0xa514, 0x9cf3, 0x94b2, 0x9cf3, 0x94b2, 0x8c72, 0x8c71, 
	0x8c51, 0x8430, 0x8430, 0x7bf0, 0x7bf0, 0x7bef, 0x7bcf, 0x73ce, 0x73ae, 0x73ae, 0x6b8e, 0x6b8e, 0x6b6d, 0x6b6d, 0x6b4d, 0x6b6d, 
	0xb596, 0xb596, 0xb596, 0xb596, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xb5b6, 0xbdd7, 
	0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xbdd7, 0xb5b6, 
	0xb5b6, 0xb596, 0xad75, 0xad55, 0xad55, 0xa534, 0xa514, 0x9cf3, 0x9cd3, 0x94b2, 0x8c71, 0x8c71, 0x7c0f, 0x8430, 0x8430, 0x7bef, 
	0x7bef, 0x7bcf, 0x73ae, 0x73ae, 0x73af, 0x738e, 0x738e, 0x6b8e, 0x738e, 0x6b8e, 0x6b6d, 0x6b8d, 0x6b6d, 0x6b6d, 0x6b4d, 0x634c
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 2064)
const int _allArray_LEN = 1;
const uint16_t* _allArray[1] = {
	_party_button
};

// Array of bitmaps
extern const uint16_t myBitmapsardine0[], myBitmapsardine1[], myBitmapsardine2[], myBitmapsardine3[], myBitmapsardine4[];
const int myBitmapallArray_LEN = 5;
const uint16_t* myBitmapallArray[5] = {
    myBitmapsardine0,
    myBitmapsardine1,
    myBitmapsardine2,
    myBitmapsardine3,
    myBitmapsardine4
};

void drawCenteredTextMultipleWords(const char* words[], int numWords, uint16_t color, int spacing, const GFXfont* font) {
    // Clear the display before drawing new text
    matrix.fillScreen(matrix.Color333(0, 0, 0)); // Clear the matrix to black

    matrix.setFont(font);
    matrix.setTextSize(1);  // Set text size to the smallest available size

    // Calculate total vertical height based on the number of words and spacing between lines
    int totalHeight = numWords * (8 + spacing) - spacing;  // Each word is 8 pixels tall, plus spacing

    // Adjust for padding; adjust yStart as necessary
    int yStart = (HEIGHT - totalHeight) / 2 + 7;  // Shift down by 7 pixels

    // Loop through each word
    for (int wordIndex = 0; wordIndex < numWords; wordIndex++) {
        const char* text = words[wordIndex];  // Get current word
        int textLength = strlen(text);

        // Calculate text width in pixels (5 width per character + custom spacing)
        int charWidth = 5;  // Fixed width for each character
        int textWidth = textLength * charWidth + (textLength - 1) * spacing;  // Total width calculation

        // Adjust for padding; shift x position as necessary
        int x = (WIDTH - textWidth) / 2 - 5; // padding

        // Calculate the y position for this word, considering line height and spacing
        int y = yStart + wordIndex * (8 + spacing);

        // Draw each character of the word with the correct spacing
        for (int i = 0; i < textLength; i++) {
            matrix.setCursor(x + i * (charWidth + spacing), y); // Set cursor for each character
            matrix.setTextColor(color); // Set the text color
            matrix.print(text[i]); // Draw the character
        }
    }
}

void drawCenteredTextMultipleWords3PT(const char* words[], int numWords, uint16_t color, int spacing, const GFXfont* font) {
    // Clear the display before drawing new text
    matrix.fillScreen(matrix.Color333(0, 0, 0)); // Clear the matrix to black

    matrix.setFont(font);
    matrix.setTextSize(1);  // Set text size to the smallest available size

    // Calculate total vertical height based on the number of words and spacing between lines
    int totalHeight = numWords * (8 + spacing) - spacing;  // Each word is 8 pixels tall, plus spacing

    // Adjust for padding; adjust yStart as necessary
    int yStart = (HEIGHT - totalHeight) / 2 + 6;  // Shift down by 7 pixels

    // Loop through each word
    for (int wordIndex = 0; wordIndex < numWords; wordIndex++) {
        const char* text = words[wordIndex];  // Get current word
        int textLength = strlen(text);

        // Calculate text width in pixels (5 width per character + custom spacing)
        int charWidth = 5;  // Fixed width for each character
        int textWidth = textLength * charWidth + (textLength - 1) * spacing;  // Total width calculation

        // Adjust for padding; shift x position as necessary
        int x = (WIDTH - textWidth) / 2 - 3; // padding

        // Calculate the y position for this word, considering line height and spacing
        int y = yStart + wordIndex * (8 + spacing);

        // Draw each character of the word with the correct spacing
        for (int i = 0; i < textLength; i++) {
            matrix.setCursor(x + i * (charWidth + spacing), y); // Set cursor for each character
            matrix.setTextColor(color); // Set the text color
            matrix.print(text[i]); // Draw the character
        }
    }
}

void draw_colored_characters(const char* word, const uint16_t colors[], const GFXfont* font) {
    // Clear the display before drawing new text
    matrix.fillScreen(matrix.Color333(0, 0, 0)); // Clear the matrix to black

    matrix.setFont(font);
    matrix.setTextSize(1);  // Set text size to the smallest available size

    int textLength = strlen(word);
    int charWidth = 5;       // Width for each character in pixels
    int charSpacing = 1;     // Space between characters in pixels

    // Calculate the total width including spacing between characters
    int textWidth = textLength * charWidth + (textLength - 1) * charSpacing;
    int xStart = (WIDTH - textWidth) / 2 - 5;      // Center horizontally with padding adjustment
    int yStart = (HEIGHT - 8) / 2 + 7;             // Center vertically with padding adjustment

    // Draw each character with its corresponding color
    for (int i = 0; i < textLength; i++) {
        int xPos = xStart + i * (charWidth + charSpacing);  // Adjust x position for character + spacing
        matrix.setCursor(xPos, yStart); // Set cursor for each character
        matrix.setTextColor(colors[i]); // Set the color for the character
        matrix.print(word[i]);          // Draw the character
    }
}

void displayBitmapImage(const uint16_t* bitmap, int width, int height) {
    clear_display();
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            // Read the RGB565 color directly
            uint16_t color = pgm_read_word(&bitmap[y * width + x]);

            // Extract RGB565 components
            uint8_t r = (color >> 11) & 0x1F;  // Red (5 bits)
            uint8_t g = (color >> 5) & 0x3F;   // Green (6 bits)
            uint8_t b = color & 0x1F;          // Blue (5 bits)

            // Detect and tone down bright white to a grayish color
            if (r == 31 && g == 63 && b == 31) {  // White in RGB565
                r = 14; // Adjusted value for a grayish tone
                g = 32; // Adjusted value for a grayish tone
                b = 14; // Adjusted value for a grayish tone
            }

            // Apply yellow boost (increase red and green channels slightly)
            else {
                r = min(31, int(r) + 2);   // Increase red by 2
                g = min(63, int(g) + 9);   // Increase green by 2
            }

            // Recombine back into RGB565 format
            uint16_t boostedColor = (r << 11) | (g << 5) | b;

            // Draw the pixel on the matrix
            matrix.drawPixel(x, y, boostedColor);
        }
    }
}

void displayBitmapWithYellowTint(const uint16_t* bitmap, int width, int height, float yellowBoost = 1.2) {
    clear_display();
    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            uint16_t color = pgm_read_word(&bitmap[y * width + x]);

            // Extract RGB565 components
            uint8_t r = (color >> 11) & 0x1F;  // Red (5 bits)
            uint8_t g = (color >> 5) & 0x3F;   // Green (6 bits)
            uint8_t b = color & 0x1F;          // Blue (5 bits)

            // Apply yellow boost (increase red and green channels)
            r = min(31, int(r * yellowBoost));
            g = min(63, int(g * yellowBoost));

            // Recombine back into RGB565 format
            uint16_t boostedColor = (r << 11) | (g << 5) | b;
            matrix.drawPixel(x, y, boostedColor);
        }
    }
}

void press_start_animation() {
  clear_display();
  
  const char* start_anim1[] = { "Press", "Start" };
  uint16_t color = scaleColor(7, 1, 0);
  int repetitions = 8;  // Number of times the animation repeats
  
  for (int i = 0; i < repetitions; i++) {
    drawCenteredTextMultipleWords(start_anim1, 2, color, 1, current_font);
    delay(700);
    clear_display();
    delay(700);
  }
  
  delay(1000);  // Final delay after the loop completes
}

void clear_display() {
  // Clear the display
  matrix.fillScreen(scaleColor(0, 0, 0));
}

void display_csh_logo() {
    clear_display();
    
    // Draw the bitmap at the current x position
    matrix.drawBitmap(0, 0, csh_logo_bitmap, WIDTH, HEIGHT, scaleColor(7, 0, 7));
    
    // Delay to control the scroll speed
    delay(2000);  // Adjust delay for faster or slower scrolling

    clear_display();
}

void extra_ball_notif() {
  static const char* eb[] = { "Extra Ball", "At", "30000" };
  clear_display();
  drawCenteredTextMultipleWords(eb, 3, scaleColor(7,0,0), 1, current_font);
  delay(4000);
  clear_display();
}

void replay_notif() {
  static const char* replay_num[] = { "Replay", "At", "40000" };
  clear_display();
  drawCenteredTextMultipleWords(replay_num, 3, scaleColor(7,0,0), 1, current_font);
  delay(4000);
  clear_display();
}

// Function to scale colors based on brightness (integer brightness from 1 to 7)
uint16_t scaleColor(uint8_t r, uint8_t g, uint8_t b) {
    // Scale each color component by brightness and ensure it's within the 0-7 range
    r = constrain(r * brightness, 0, 7);
    g = constrain(g * brightness, 0, 7);
    b = constrain(b * brightness, 0, 7);
    return matrix.Color333(r, g, b);
}

// BIG OL ATTRACT MODE
void attractMode() {
    // Variables
    static const char* attract1[] = { "CSH", "Pinball" };
    static const char* attract2[] = { "Designer:", "Garrett", "Maury" };
    static const char* attract3[] = { "Engineer:", "Leo", "Brown" };
    static const char* attract4[] = { "Software:", "Ethan", "Ferguson" };
    static const char* attract5[] = { "Join Us!", "#Project-", "Pinball" };
    static const char* attract6[] = { "Game", "Over" };
    static const char* attract7[] = { "Free", "Play" };
    static const char* attract8[] = { "Insert", "Drink", "Credits" };
    static const char* attract9[] = { "Grand", "Champion", grand_champion }; // Have timestamp at some point
    static const char* attract10[] = { "High", "Score 1", high_score_1 };
    static const char* attract11[] = { "High", "Score 2", high_score_2 };
    static const char* attract12[] = { "High", "Score 3", high_score_3 };
    static const char* attract13[] = { "High", "Score 4", high_score_4 };
    static const char* attract44[] = { "High", "Score 5", high_score_5 };
    static const char* attract14[] = { "Events" };
    static const char* attract15[] = { "Imagine", "RIT", "2024" };
    static const char* attract16[] = { "You Should", "Check Out", "The" };
    static const char* attract17[] = { "Rochester", "Pinball", "Collective" };
    static const char* attract18[] = { "https://ro", "chesterpin", "ball.com" };
    static const char* attract19[] = { "We Love", "Stern", "Pinball" };
    static const char* attract20[] = { "Williams", "They Cool", "Too" };
    static const char* attract21[] = { "Inspired", "By Stern's", "Deadpool" };
    static const char* attract22[] = { "Strong", "Museum" };
    static const char* attract23[] = { "And" };
    static const char* attract24[] = { "Arcade", "80s" };
    static const char* attract25[] = { "Also", "Finally" };
    static const char* attract26[] = { "Swill", "burger" };
    static const char* attract27[] = { "Version", "0.8" };

    clear_display();
    display_csh_logo();
    delay(4000);
    matrix.drawBitmap(0, 0, csh_pinball_image, WIDTH, HEIGHT, scaleColor(7, 1, 0));
    delay(8000);
    
    // Press Start
    press_start_animation();

    // Info about the current game (over)
    drawCenteredTextMultipleWords(attract6, 2, scaleColor(7, 0, 0), 1, current_font);
    delay(4000);
    if (free_play == true) {
      drawCenteredTextMultipleWords(attract7, 2, scaleColor(7, 1, 0), 1, current_font);
      delay(4000);
    }
    else {
      drawCenteredTextMultipleWords(attract8, 3, scaleColor(7, 1, 0), 1, current_font);
      delay(4000);
    }

    extra_ball_notif();
    replay_notif();

    // Version
    drawCenteredTextMultipleWords(attract27, 2, scaleColor(7, 1, 0), 1, current_font);
    delay(3000);

    // Everyones Names
    drawCenteredTextMultipleWords(attract2, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract3, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract4, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract5, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(5000);

    // High Scores
    drawCenteredTextMultipleWords(attract9, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract10, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract11, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract12, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract13, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract44, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);

    // Events We've Gone to
    drawCenteredTextMultipleWords(attract14, 1, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract15, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);

    // Cool Places Advertisement
    drawCenteredTextMultipleWords(attract16, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract17, 3, scaleColor(3, 7, 0), 1, current_font);
    delay(4000);

    current_font = &dotmatrixdisplay3pt7b;
    drawCenteredTextMultipleWords3PT(attract18, 3, scaleColor(3, 7, 0), 1, current_font);
    delay(4000);
    current_font = &dotmatrixdisplay4pt7b;

    drawCenteredTextMultipleWords(attract21, 3, scaleColor(7, 0, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract20, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract16, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract22, 2, scaleColor(3, 7, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract23, 1, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract24, 2, scaleColor(3, 7, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract25, 2, scaleColor(3, 7, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract26, 2, scaleColor(3, 7, 0), 1, current_font);
    delay(4000);

    // STATISTICS
    static const char* attract28[] = { "STATISTICS" };
    static const char* attract29[] = { "Total", "Games", total_games };
    static const char* attract30[] = { "Total", "Balls", total_balls_played };
    static const char* attract31[] = { "Average", "Ball Time", average_ball_time };
    static const char* attract32[] = { "Total", "Replays", total_replays };
    static const char* attract33[] = { "Money", "Earned", total_money_earned };
    static const char* attract34[] = { "Total", "Rollovers", total_rollover };
    static const char* attract35[] = { "Total", "Popbumpers", total_popbumpers };
    static const char* attract36[] = { "Total Drop", "Targets", total_drop_targets };
    static const char* attract37[] = { "Total", "Targets", total_targets };
    static const char* attract38[] = { "Total", "Scoops", total_scoop };
    static const char* attract39[] = { "Total", "Slingshots", total_slingshots };
    static const char* attract40[] = { "Total", "Flips", total_flips };
    static const char* attract41[] = { "Total Auto", "Kicker", total_auto_kicker };
    static const char* attract42[] = { "Total", "Trough", total_trough };
    static const char* attract43[] = { "Total", "Ramps", total_ramps };
    drawCenteredTextMultipleWords(attract28, 1, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract29, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract30, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract31, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract32, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract33, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract34, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract35, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract36, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract37, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract38, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract39, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract40, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract41, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract42, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);
    drawCenteredTextMultipleWords(attract43, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(4000);

    // Sardine Can Animation
    brightness = 0.1;
    for (int i = 0; i < myBitmapallArray_LEN; i++) {
      displayBitmapWithYellowTint(myBitmapallArray[i], 64, 32, 1.2);  // Assuming 64x32 images, adjust if needed
      delay(300);
    }
    clear_display();
    brightness = 1;
    delay(2000);

    // Ball Animation
    ball_animation(20, 1);
    clear_display();

    // Circular Line Animation
    for (int i = 0; i < 8; i++) {
      line_circle_animation();
    }
}

// IN GAME ANIMATIONS
static int warning_num = 0;
bool warning = false;
void show_warning(const char* warning[], int num_words, int duration, int times) {
    for (int i = 0; i < times; i++) {
        drawCenteredTextMultipleWords(warning, num_words, matrix.Color333(7, 0, 0), 1, current_font);
        delay(duration);
        clear_display();
        delay(500); // Short delay after clearing display
    }
}
void warning_animation(int num_of_warnings) {
    clear_display();

    if (num_of_warnings == 1) {
        static const char* warning[] = { "WARNING" };
        show_warning(warning, 1, 900, 3); // Show "WARNING" 3 times with 900ms duration
        warning_num++;
    } 
    else if (num_of_warnings == 2) {
        static const char* warning[] = { "WARNING", "WARNING" };
        show_warning(warning, 2, 900, 3); // Show "WARNING WARNING" 3 times with 900ms duration
        warning_num++;
    } 
    else if (num_of_warnings == 3) {
        static const char* warning[] = { "TILT" };
        drawCenteredTextMultipleWords(warning, 1, matrix.Color333(7, 0, 0), 1, current_font);
        delay(5000); // Show "TILT" for 5000ms
        clear_display();
        warning_num = 0;
    }

    warning = false;
}

void ball_saved_animation() {
    static const char* ball_status[] = { "Ball", "Saved!" };
    clear_display();

    for (int i = 0; i < 6; i++) {
        drawCenteredTextMultipleWords(ball_status, 2, matrix.Color333(0, 7, 0), 1, current_font);
        delay(500);
        clear_display();
        delay(100);
    }
}

void playfield_multiplier_animation(const char* multiplier) {
    static const char* playfield_status[] = { "Playfield", multiplier };
    clear_display();

    for (int i = 0; i < 5; i++) {
        drawCenteredTextMultipleWords(playfield_status, 2, scaleColor(7, 7, 7), 1, current_font);
        delay(700);
        clear_display();
        delay(500);
    }
}

void bagels_multiball_animation() {
  int centerX = 32;  // Center of a 64x32 matrix
  int centerY = 16;
  int outerRadius = 12; // Outer radius for the bagel
  int innerRadius = 5;  // Inner radius for the hole
  static const char* playfield_status[] = { "BAGELS", "MULTIBALL" };

  clear_display();

  uint16_t outerColor = matrix.Color333(5, 3, 0);  // Light brown (bagel)
  uint16_t innerColor = matrix.Color333(3, 2, 1);  // Darker brown (hole)

  // Draw the outer circle (bagel)
  for (int y = -outerRadius; y <= outerRadius; y++) {
      for (int x = -outerRadius; x <= outerRadius; x++) {
          if (x * x + y * y <= outerRadius * outerRadius) {
              matrix.drawPixel(centerX + x, centerY + y, outerColor);
              delay(2);
          }
      }
  }

  // Draw the inner circle (bagel hole)
  for (int y = -innerRadius; y <= innerRadius; y++) {
      for (int x = -innerRadius; x <= innerRadius; x++) {
          if (x * x + y * y <= innerRadius * innerRadius) {
              matrix.drawPixel(centerX + x, centerY + y, innerColor);
              delay(2);
          }
      }
  }

  delay(700);

  // Use a loop to repeat the text animation
  for (int i = 0; i < 6; i++) {
      clear_display();
      drawCenteredTextMultipleWords(playfield_status, 2, scaleColor(4, 3, 0), 1, current_font);
      delay(400);  // Display for 400ms
      clear_display();
      delay(200);  // Pause for 200ms between iterations
  }
}

// Ball properties struct
struct Ball {
  int x, y;           // Position
  int xSpeed, ySpeed; // Speed in each direction
  int size;           // Ball size
  uint16_t color;     // Ball color
};

// Triangle properties struct
struct Triangle {
  int x, y;           // Position
  int xSpeed, ySpeed; // Speed in each direction
  int size;           // Size of the triangle (larger than ball size)
  uint16_t color;     // Color of the triangle
};

// Forward declaration of the checkCollision function
bool checkCollision(Ball &ball1, Ball &ball2);
bool checkCollision(Ball &ball, Triangle &triangle);

void ball_animation(int durationInSeconds, int initialBalls) {
  const int maxBalls = 20;       // Max number of balls allowed
  const int maxTriangles = 20;   // Max number of triangles allowed
  int numBalls = min(initialBalls, maxBalls); // Start with specified number of balls
  int numTriangles = 0;          // Start with no triangles

  // Colors for balls and triangles
  uint16_t colors[] = {
    matrix.Color333(7, 0, 0),   // Red
    matrix.Color333(0, 7, 0),   // Green
    matrix.Color333(0, 0, 7),   // Blue
    matrix.Color333(7, 7, 0),   // Yellow
    matrix.Color333(7, 0, 7),   // Magenta
    matrix.Color333(0, 7, 7),   // Cyan
    matrix.Color333(7, 7, 7)    // White
  };

  Ball balls[maxBalls];          // Array to hold balls
  Triangle triangles[maxTriangles]; // Array to hold triangles

  // Initialize the balls at random locations
  for (int i = 0; i < numBalls; i++) {
    balls[i] = {
      (int)random(0, 64 - 2),   // Random x position (adjusting for size)
      (int)random(0, 32 - 2),   // Random y position (adjusting for size)
      (int)random(1, 3),        // Random positive x speed (1 or 2)
      (int)random(1, 3),        // Random positive y speed (1 or 2)
      2,                        // Ball size
      colors[i % 7]            // Color
    };
  }

  unsigned long startTime = millis(); // Get the start time

  // Main animation loop
  while (millis() - startTime <= durationInSeconds * 1000) {
    matrix.fillScreen(0);  // Clear the screen at the start of each frame

    // Move and draw each ball
    for (int i = 0; i < numBalls; i++) {
      Ball &ball = balls[i];

      // Move ball
      ball.x += ball.xSpeed;
      ball.y += ball.ySpeed;

      // Check for collision with screen boundaries
      if (ball.x <= 0 || ball.x >= 64 - ball.size) {
        ball.xSpeed = -ball.xSpeed;  // Reverse X direction
      }
      if (ball.y <= 0 || ball.y >= 32 - ball.size) {
        ball.ySpeed = -ball.ySpeed;  // Reverse Y direction
      }

      // Check if the ball hits a corner to spawn a new ball or triangle
      if ((ball.x <= 0 || ball.x >= 64 - ball.size) && (ball.y <= 0 || ball.y >= 32 - ball.size)) {
        if (random(0, 40) == 0) { // 1/40 chance to spawn a triangle
          if (numTriangles < maxTriangles) {
            triangles[numTriangles] = {
              (int)random(0, 64 - 4),  // Random x position for triangle (adjusting for size)
              (int)random(0, 32 - 4),  // Random y position for triangle (adjusting for size)
              (int)random(1, 3),       // Random positive x speed
              (int)random(1, 3),       // Random positive y speed
              4,                       // Triangle size (increased to 4)
              colors[numTriangles % 7] // Color
            };
            numTriangles++;
          }
        } else {
          if (numBalls < maxBalls) {
            balls[numBalls] = {
              (int)random(0, 64 - 2),      // Random x position for new ball
              (int)random(0, 32 - 2),      // Random y position for new ball
              (int)random(1, 3),           // Random positive x speed
              (int)random(1, 3),           // Random positive y speed
              2,                           // Ball size
              colors[numBalls % 7]        // Color
            };
            numBalls++;
          }
        }
      }

      // Draw the ball in its new position
      matrix.fillRect(ball.x, ball.y, ball.size, ball.size, ball.color);
    }

    // Move and draw each triangle
    for (int i = 0; i < numTriangles; i++) {
      Triangle &triangle = triangles[i];

      // Move triangle
      triangle.x += triangle.xSpeed;
      triangle.y += triangle.ySpeed;

      // Check for collision with screen boundaries for triangles
      if (triangle.x <= 0 || triangle.x >= 64 - triangle.size) {
        triangle.xSpeed = -triangle.xSpeed;  // Reverse X direction
      }
      if (triangle.y <= 0 || triangle.y >= 32 - triangle.size) {
        triangle.ySpeed = -triangle.ySpeed;  // Reverse Y direction
      }

      // Draw the triangle in its new position
      matrix.fillTriangle(triangle.x, triangle.y, triangle.x + triangle.size, triangle.y, triangle.x + triangle.size / 2, triangle.y - triangle.size, triangle.color);
    }

    // Check for collisions between balls and triangles
    for (int i = 0; i < numBalls; i++) {
      for (int j = 0; j < numTriangles; j++) {
        if (checkCollision(balls[i], triangles[j])) {
          // Handle collision with triangle (e.g., reverse direction or any other logic)
          balls[i].xSpeed = -balls[i].xSpeed;
          balls[i].ySpeed = -balls[i].ySpeed;
        }
      }
    }

    // Check for collisions between balls
    for (int i = 0; i < numBalls; i++) {
      for (int j = i + 1; j < numBalls; j++) {
        if (checkCollision(balls[i], balls[j])) {
          // Swap directions on collision
          balls[i].xSpeed = -balls[i].xSpeed;
          balls[i].ySpeed = -balls[i].ySpeed;
          balls[j].xSpeed = -balls[j].xSpeed;
          balls[j].ySpeed = -balls[j].ySpeed;
        }
      }
    }

    delay(30);  // Control the speed of animation

    // Exit the loop after the specified duration
    if (millis() - startTime >= durationInSeconds * 1000) {
      break;  // Exit the loop after the specified duration
    }
  }
}

// Function to check if two balls collide
bool checkCollision(Ball &ball1, Ball &ball2) {
    int xDist = ball1.x - ball2.x;
    int yDist = ball1.y - ball2.y;
    int distanceSquared = (xDist * xDist) + (yDist * yDist);
    int combinedSize = (ball1.size + ball2.size) / 2; // Adjust based on your logic
    return distanceSquared < (combinedSize * combinedSize);
}

// Function to check if a ball collides with a triangle
bool checkCollision(Ball &ball, Triangle &triangle) {
    // Simple triangle collision detection (bounding box check)
    // You may want to implement a more robust collision detection algorithm based on your needs
    return (ball.x < triangle.x + triangle.size && ball.x + ball.size > triangle.x &&
            ball.y < triangle.y + triangle.size && ball.y + ball.size > triangle.y);
}

void pcp_multiball_animation() {
  static const char* playfield_status[] = { "PROJECT", "PINBALL" };
  static const char* playfield_status2[] = { "MULTIBALL" };
  const int displayColor = scaleColor(7, 1, 0);

  ball_animation(8, 12);

  // Show "PROJECT PINBALL" three times
  for (int i = 0; i < 3; i++) {
    clear_display();
    drawCenteredTextMultipleWords(playfield_status, 2, displayColor, 1, current_font);
    delay(400);
    clear_display();
    delay(200);
  }

  // Show "MULTIBALL" twice
  for (int i = 0; i < 2; i++) {
    clear_display();
    drawCenteredTextMultipleWords(playfield_status2, 1, displayColor, 1, current_font);
    delay(400);
    clear_display();
    delay(200);
  }

  delay(1400); // Final delay before ending
}

void party_button_multiball_animation() {
    static const char* button[] = { "No..." };
    static const char* button2[] = { "NOOOO" };
    static const char* playfield_status[] = { "PARTY", "BUTTON" };
    static const char* playfield_status2[] = { "MULTIBALL" };
    const int displayColor = scaleColor(7, 0, 0);

    clear_display();
    brightness = 0.1;
    displayBitmapImage(_allArray[0], 64, 32);  // Display initial bitmap
    delay(6000);
    brightness = 1;

    clear_display();
    drawCenteredTextMultipleWords(button, 1, displayColor, 1, current_font);
    delay(800);
    drawCenteredTextMultipleWords(button2, 1, displayColor, 1, current_font);
    delay(1200);

    drawCenteredTextMultipleWords(playfield_status, 2, displayColor, 1, current_font);
    delay(900);

    // Display "MULTIBALL" with dynamic delays
    int multiballDelays[] = {300, 300, 500, 900};
    for (int i = 0; i < 4; i++) {
        clear_display();
        delay(multiballDelays[i]);
        drawCenteredTextMultipleWords(playfield_status2, 1, displayColor, 1, current_font);
        delay(multiballDelays[i]);
    }
    clear_display();
}

// Player X, you're up
void player_up(const char* player) {
  static const char* display_status[] = { "Player", player, "You're Up!" };
  clear_display();
  drawCenteredTextMultipleWords(display_status, 3, scaleColor(7,1,0), 1, current_font);
  delay(5000);
  clear_display();
}

// Skill Shot Animations
void skill_shot_animation() {
  static const char* display_status[] = { "Skill", "Shot" };
  static const char* display_status2[] = { "50000" };
  const int displayColor = scaleColor(7, 0, 6);

  // Show "Skill Shot" three times with alternating display and clear
  for (int i = 0; i < 3; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status, 2, displayColor, 1, current_font);
    delay(500);
    clear_display();
    delay(500);
  }

  // Show "50000" three times with alternating display and clear
  for (int i = 0; i < 3; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status2, 1, displayColor, 1, current_font);
    delay(500);
    clear_display();
    delay(500);
  }
}

void super_skill_shot_animation() {
  static const char* display_status[] = { "Super", "Skill", "Shot" };
  static const char* display_status2[] = { "100000" };
  const int displayColor = scaleColor(1, 7, 0);

  // Display "Super Skill Shot" 10 times with alternating display and clear
  for (int i = 0; i < 10; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status, 3, displayColor, 1, current_font);
    delay(100);
    clear_display();
    delay(100);
  }

  // Display "100000" 10 times with alternating display and clear
  for (int i = 0; i < 10; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status2, 1, displayColor, 1, current_font);
    delay(100);
    clear_display();
    delay(100);
  }
}

void impossible_skill_shot_animation() {
  static const char* display_status[] = { "Impossible", "Skill", "Shot!!" };
  static const char* display_status2[] = { "250000" };
  const int displayColor = scaleColor(7, 7, 7);

  // Display "Impossible Skill Shot!!" 10 times with alternating display and clear
  for (int i = 0; i < 10; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status, 3, displayColor, 1, current_font);
    delay(100);
    clear_display();
    delay(100);
  }

  // Display "250000" 10 times with alternating display and clear
  for (int i = 0; i < 10; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status2, 1, displayColor, 1, current_font);
    delay(100);
    clear_display();
    delay(100);
  }
}

void super_jets_animation() {
  static const char* display_status[] = { "SUPER", "JETS" };
  const int displayColor = scaleColor(7, 0, 6);

  // Display "SUPER JETS" 10 times with alternating display and clear
  for (int i = 0; i < 10; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status, 2, displayColor, 1, current_font);
    delay(100);
    clear_display();
    delay(100);
  }
}

void light_extra_ball_animation() {
  static const char* display_status[] = { "EXTRA", "BALL", "IS LIT" };
  const int displayColor = scaleColor(7, 1, 0);

  // Display "EXTRA BALL IS LIT" 8 times with alternating display and clear
  for (int i = 0; i < 8; i++) {
    clear_display();
    drawCenteredTextMultipleWords(display_status, 3, displayColor, 1, current_font);
    delay(300);
    clear_display();
    delay(300);
  }
}

void extra_ball_animation() {
  static const char* display_status[] = { "EXTRA", "BALL" };
  const uint16_t silverColor = matrix.Color333(25, 25, 25);  // Approximate silver color
  const int radius = 16;                                      // Radius for the largest ball that fits
  const int centerY = 32 / 2;                                 // Center Y position for the ball
  const int startX = -radius;
  const int endX = 64 + radius;                               // Roll off the screen on the right side

  // Roll the ball from left to right
  for (int x = startX; x <= endX; x++) {
      matrix.fillScreen(matrix.Color333(0, 0, 0));            // Clear the screen to black
      matrix.fillCircle(x, centerY, radius, silverColor);     // Draw the ball at the new position
      delay(1);                                               // Adjust delay for smooth roll
  }

  clear_display();
  const int displayColor = scaleColor(2, 2, 2);

  // Display "EXTRA BALL" 10 times with alternating display and clear
  for (int i = 0; i < 10; i++) {
    drawCenteredTextMultipleWords(display_status, 2, displayColor, 1, current_font);
    delay(100);
    clear_display();
    delay(100);
  }
}

// Shows which letters are hit, and which letters are not hit using colors
void csh_letters(bool c, bool s, bool h) {
    const char* word = "CSH";

    // Initialize all colors to grey, modify based on boolean values
    uint16_t colors[] = { 0x9cf3, 0x9cf3, 0x9cf3 };
    if (c) colors[0] = 0xf80f; // Purple for 'C'
    if (s) colors[1] = 0xf80f; // Purple for 'S'
    if (h) colors[2] = 0xf80f; // Purple for 'H'

    // Loop to alternate display and clear 10 times
    for (int i = 0; i < 10; i++) {
        draw_colored_characters(word, colors, current_font);
        delay(100);
        clear_display();
        delay(100);
    }
}

void _1976_rollovers(bool one, bool nine, bool seven, bool six) {
    const char* word = "1976";

    // Initialize all colors to grey
    uint16_t colors[] = { 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3 };

    // Set colors based on the boolean values
    if (one) colors[0] = 0xf800; // red for '1'
    if (nine) colors[1] = 0xf800; // red for '9'
    if (seven) colors[2] = 0xf800; // red for '7'
    if (six) colors[3] = 0xf800; // red for '6'

    // Loop to alternate display and clear 10 times
    for (int i = 0; i < 10; i++) {
        draw_colored_characters(word, colors, current_font);
        delay(100);
        clear_display();
        delay(100);
    }
}

void rtp_letters(bool r, bool t, bool p) {
    const char* word = "RTP";

    // Initialize all colors to grey
    uint16_t colors[] = { 0x9cf3, 0x9cf3, 0x9cf3 };

    // Set colors based on the boolean values
    if (r) colors[0] = 0xf800; // Purple for 'R'
    if (t) colors[1] = 0xf800; // Purple for 'T'
    if (p) colors[2] = 0xf800; // Purple for 'P'

    // Loop to alternate display and clear 10 times
    for (int i = 0; i < 10; i++) {
        draw_colored_characters(word, colors, current_font);
        delay(100);
        clear_display();
        delay(100);
    }
}

void big_letters(bool b, bool i, bool g) {
    const char* word = "BIG";

    // Initialize all colors to grey
    uint16_t colors[] = { 0x9cf3, 0x9cf3, 0x9cf3 };

    // Set colors based on the boolean values
    if (b) colors[0] = 0x051f; // blue for 'B'
    if (i) colors[1] = 0x051f; // blue for 'I'
    if (g) colors[2] = 0x051f; // blue for 'G'

    // Loop to alternate display and clear 10 times
    for (int i = 0; i < 10; i++) {
        draw_colored_characters(word, colors, current_font);
        delay(100);
        clear_display();
        delay(100);
    }
}

void bepis_letters(bool b, bool e, bool p, bool i, bool s) {
    const char* word = "BEPIS";

    // Initialize all colors to grey
    uint16_t colors[] = { 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3, 0x9cf3 };

    // Set colors based on the boolean values
    if (b) colors[0] = 0x051f; // red for 'b'
    if (e) colors[1] = 0x051f; // red for 'e'
    if (p) colors[2] = 0x051f; // red for 'p'
    if (i) colors[3] = 0x051f; // red for 'i'
    if (s) colors[4] = 0x051f; // red for 's'

    // Loop to alternate display and clear 10 times
    for (int j = 0; j < 10; j++) {
        draw_colored_characters(word, colors, current_font);
        delay(100);
        clear_display();
        delay(100);
    }
}

void light_mystery_animation() {
  static const char* display_status[] = { "MYSTERY", "IS", "LIT" };

  // Loop to alternate between displaying and clearing the message 6 times
  for (int i = 0; i < 6; i++) {
    drawCenteredTextMultipleWords(display_status, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(300);
    clear_display();
    delay(300);
  }
}

void hurry_up_animation(const char* target, const long initialScore) {
    clear_display();

    static const char* display_status[] = { target, "HURRY UP" };
    const int timerMillis = 10000;    // 10 seconds in milliseconds
    long startTime = millis();         // Record the start time

    // Draw the initial screen with the starting score
    char initialScoreDisplay[10];
    sprintf(initialScoreDisplay, "%ld", initialScore); // Display initial score

    const char* initialDisplay[] = { "LOUNGE", "HURRY UP", initialScoreDisplay };
    drawCenteredTextMultipleWords(initialDisplay, 3, scaleColor(7, 1, 0), 1, current_font);

    // Loop until the timer reaches zero
    while (true) {
        long elapsedTime = millis() - startTime;

        // Check if the timer has reached zero
        if (elapsedTime >= timerMillis) {
            // Display final score as zero
            const char* finalDisplay[] = { "LOUNGE", "HURRY UP", "0" };
            drawCenteredTextMultipleWords(finalDisplay, 3, scaleColor(7, 1, 0), 1, current_font);
            break;
        }

        // Calculate the remaining score based on the time ratio
        float timeRatio = (timerMillis - elapsedTime) / (float)timerMillis; 
        long remainingScore = (long)(initialScore * timeRatio); // Also changed to long
        // Ensure the remaining score does not drop below zero
        if (remainingScore < 0) {
            remainingScore = 0; // Avoid negative values
        }

        // Convert remaining score to a string without leading zeros
        char scoreDisplay[10];
        sprintf(scoreDisplay, "%ld", remainingScore); // Changed to %ld for long

        // Update display array with the current score
        const char* currentDisplay[] = { "LOUNGE", "HURRY UP", scoreDisplay };

        // Draw the display with the updated score
        drawCenteredTextMultipleWords(currentDisplay, 3, scaleColor(7, 1, 0), 1, current_font);

        // Brief delay for smoother visual updates
        //delay(2);  // Adjust delay as necessary for visibility
    }

    // Clear the display or show another message if necessary
    clear_display();
}

// Function to draw a line using Bresenham's algorithm
void drawLine(int x0, int y0, int x1, int y1, uint16_t color) {
    int dx = abs(x1 - x0);
    int dy = abs(y1 - y0);
    int sx = (x0 < x1) ? 1 : -1;
    int sy = (y0 < y1) ? 1 : -1;
    int err = dx - dy;

    while (true) {
        matrix.drawPixel(x0, y0, color); // Draw the pixel at (x0, y0)
        
        // Check bounds to avoid drawing outside the display
        if (x0 < 0 || x0 >= matrix.width() || y0 < 0 || y0 >= matrix.height()) {
            break; // Exit if we go out of bounds
        }
        
        if (x0 == x1 && y0 == y1) break; // Exit if we reach the end point
        int err2 = err * 2;
        if (err2 > -dy) {
            err -= dy;
            x0 += sx;
        }
        if (err2 < dx) {
            err += dx;
            y0 += sy;
        }
    }
}

void line_circle_animation() {
  int centerX = matrix.width() / 2;
  int centerY = matrix.height() / 2;
  int lineLength = matrix.width(); // Length of the line to reach the edge
  float angleIncrement = 1; // Angle increment in degrees for smoother rotation

  // Loop to create the circular animation
  for (float angle = 0; angle < 360; angle += angleIncrement) {
      // Calculate the end point of the line based on the current angle
      int endX = centerX + lineLength * cos(radians(angle));
      int endY = centerY + lineLength * sin(radians(angle));

      // Draw the line from center to the calculated endpoint
      drawLine(centerX, centerY, endX, endY, matrix.Color333(255, 230, 0)); // White color for the line

      // Update the display
      matrix.swapBuffers(true);

      delay(5);
      
      // Optionally clear the display before the next iteration to avoid trails
      matrix.fillScreen(matrix.Color333(0, 0, 0)); // Clear the screen to black
  }
}

void jackpot_animation(const char* word, const char* word2, int numOfWords) {
  clear_display();

  // Adjust the array size based on the number of words
  const char* display_status[2] = { word, nullptr };
  if (numOfWords > 1 && word2 != nullptr) {
    display_status[1] = word2;
  }

  int centerX = matrix.width() / 2;
  int centerY = matrix.height() / 2;
  int lineLength = matrix.width(); // Length of the line to reach the edge
  float angleIncrement = 1; // Angle increment in degrees for smoother rotation

  // Loop to create the circular animation
  for (float angle = 0; angle < 360; angle += angleIncrement) {
      // Calculate the end point of the line based on the current angle
      int endX = centerX + lineLength * cos(radians(angle));
      int endY = centerY + lineLength * sin(radians(angle));

      // Draw the line from center to the calculated endpoint
      drawLine(centerX, centerY, endX, endY, matrix.Color333(255, 230, 0)); // White color for the line

      // Update the display
      matrix.swapBuffers(true);
      
      // Optionally clear the display before the next iteration to avoid trails
      // matrix.fillScreen(matrix.Color333(0, 0, 0)); // Clear the screen to black
  }

  clear_display();

  // Call the function to display the text according to the number of words
  drawCenteredTextMultipleWords(display_status, numOfWords, scaleColor(7,0,0), 1, current_font);

  // Flashing effect with delays
  for (int i = 0; i < 4; ++i) {
      delay(100);
      clear_display();
      delay(100);
      drawCenteredTextMultipleWords(display_status, numOfWords, scaleColor(7,0,0), 1, current_font);
  }

  clear_display();
}

void light_house_meeting() {
  static const char* display_status[] = { "HOUSE", "MEETING", "IS LIT" };

  const int numCycles = 5; // Number of times the display toggles
  const int displayDuration = 300; // Duration to show text
  const int clearDuration = 300;  // Duration to clear display

  // Loop through the cycle of display and clear
  for (int i = 0; i < numCycles; i++) {
    drawCenteredTextMultipleWords(display_status, 3, scaleColor(7, 1, 0), 1, current_font);
    delay(displayDuration); // Show text for specified duration
    clear_display();        // Clear the display
    delay(clearDuration);   // Wait before showing again
  }

  // Optionally, you could clear the display after the final cycle
  clear_display();
}

void light_bagels_multiball() {
  static const char* display_status[] = { "BAGELS", "MULTIBALL", "IS LIT" };

  const int numCycles = 5; // Number of times the display toggles
  const int displayDuration = 300; // Duration to show text
  const int clearDuration = 300;  // Duration to clear display

  // Loop through the cycle of display and clear
  for (int i = 0; i < numCycles; i++) {
    drawCenteredTextMultipleWords(display_status, 3, scaleColor(1, 7, 0), 1, current_font);
    delay(displayDuration); // Show text for specified duration
    clear_display();        // Clear the display
    delay(clearDuration);   // Wait before showing again
  }

  // Optionally, you could clear the display after the final cycle
  clear_display();
}

void light_pcp_multiball() {
  // Display the first set of words "PROJECT PINBALL MULTIBALL"
  static const char* display_status[] = { "PROJECT", "PINBALL", "MULTIBALL" };
  const int numCycles = 5;  // Number of times the text will be displayed
  const int displayDuration = 200; // Duration for each cycle
  const int clearDuration = 200;   // Duration for clearing display

  // Loop to display and clear the first set of words
  for (int i = 0; i < numCycles; i++) {
    drawCenteredTextMultipleWords(display_status, 3, scaleColor(1, 7, 0), 1, current_font);
    delay(displayDuration); // Show text for specified duration
    clear_display();        // Clear the display
    delay(clearDuration);   // Wait before showing again
  }

  // Display the second set of words "IS LIT"
  static const char* display_status2[] = { "IS", "LIT" };

  // Loop to display and clear the second set of words
  for (int i = 0; i < numCycles; i++) {
    drawCenteredTextMultipleWords(display_status2, 2, scaleColor(1, 7, 0), 1, current_font);
    delay(displayDuration); // Show text for specified duration
    clear_display();        // Clear the display
    delay(clearDuration);   // Wait before showing again
  }

  // Optional: Clear display at the end (can be omitted if not needed)
  clear_display();
}

void light_party_button_multiball() {
  static const char* display_status[] = { "PARTY", "BUTTON", "MULTIBALL" };
  static const char* display_status2[] = { "IS", "LIT" };

  const int numCycles = 3;  // Number of times the text will be displayed
  const int displayDuration = 400; // Duration for each cycle
  const int clearDuration = 400;   // Duration for clearing display

  // Function to handle the repeated display and clear logic
  auto displayAndClear = [](const char* status[], int wordsCount) {
    for (int i = 0; i < numCycles; i++) {
      drawCenteredTextMultipleWords(status, wordsCount, scaleColor(7, 0, 0), 1, current_font);
      delay(displayDuration); // Show text for specified duration
      clear_display();        // Clear the display
      delay(clearDuration);   // Wait before showing again
    }
  };

  // Display the first set of words
  displayAndClear(display_status, 3);

  // Display the second set of words
  displayAndClear(display_status2, 2);

  // Optional: Clear display at the end (can be omitted if not needed)
  clear_display();
}

void light_opcommathon() {
  static const char* display_status[] = { "OP", "COMMATHON", "IS LIT" };

  const int numCycles = 6;  // Number of times the text will be displayed
  const int displayDuration = 200; // Duration for each cycle
  const int clearDuration = 200;   // Duration for clearing display

  // Function to handle the repeated display and clear logic
  auto displayAndClear = [](const char* status[], int wordsCount) {
    for (int i = 0; i < numCycles; i++) {
      drawCenteredTextMultipleWords(status, wordsCount, scaleColor(7, 0, 0), 1, current_font);
      delay(displayDuration); // Show text for specified duration
      clear_display();        // Clear the display
      delay(clearDuration);   // Wait before showing again
    }
  };

  // Display the words in a loop
  displayAndClear(display_status, 3);

  // Optional: Clear display at the end (can be omitted if not needed)
  clear_display();
}

void add_a_ball_animation() {
  static const char* display_status[] = { "BALL", "ADDED" };

  const int numCycles = 6;  // Number of times the text will be displayed
  const int displayDuration = 200; // Duration for each cycle
  const int clearDuration = 200;   // Duration for clearing display

  // Function to handle the repeated display and clear logic
  auto displayAndClear = [](const char* status[], int wordsCount) {
    for (int i = 0; i < numCycles; i++) {
      drawCenteredTextMultipleWords(status, wordsCount, scaleColor(0, 7, 0), 1, current_font);
      delay(displayDuration); // Show text for specified duration
      clear_display();        // Clear the display
      delay(clearDuration);   // Wait before showing again
    }
  };

  // Display the words in a loop
  displayAndClear(display_status, 2);

  // Optional: Clear display at the end (can be omitted if not needed)
  clear_display();
}

void calculate_bonus_animation(int bonus, int drinks, int devcade_games, int imagine_projs, int bonusX) {
  static const char* display_status[] = { "BONUS" };

  static const char* display_status2[] = { "Drinks", "Dropped", "5 * 5000" };
  static const char* display_status3[] = { "Devcade", "Games", "1 * 50000" };
  static const char* display_status4[] = { "Imagine", "Projects",  "5 * 100000" };
  static const char* display_status5[] = { "Bonus", "X:", "2x" };

  clear_display();
  drawCenteredTextMultipleWords(display_status, 1, scaleColor(0,7,0), 1, current_font);
  delay(1500);
  clear_display();
  drawCenteredTextMultipleWords(display_status2, 3, scaleColor(0,0,7), 1, current_font);
  delay(1200);
  clear_display();
  drawCenteredTextMultipleWords(display_status3, 3, scaleColor(7,0,0), 1, current_font);
  delay(1200);
  clear_display();
  drawCenteredTextMultipleWords(display_status4, 3, scaleColor(7,5,0), 1, current_font);
  delay(1200);
  clear_display();
  drawCenteredTextMultipleWords(display_status5, 3, scaleColor(7,6,0), 1, current_font);
  delay(1200);
  clear_display();

  long bonus1 = bonus + (drinks * 5000);
  String bonusString = String(bonus1);   // Convert integer to String
  long bonus2 = bonus1 + (devcade_games * 50000);
  long bonus3 = bonus2 + (imagine_projs * 100000);
  long bonus4 = bonus3 * bonusX;

  // Define display_status6 as a modifiable array of const char* pointers
  static const char* display_status6[2];
  display_status6[0] = "Bonus";
  display_status6[1] = bonusString.c_str();  // Convert String to const char*
  drawCenteredTextMultipleWords(display_status6, 2, scaleColor(7,2,0), 1, current_font);
  delay(400);
  clear_display();

  bonusString = String(bonus2);   // Convert integer to String
  display_status6[1] = bonusString.c_str();  // Convert String to const char*
  drawCenteredTextMultipleWords(display_status6, 2, scaleColor(7,2,0), 1, current_font);
  delay(400);
  clear_display();

  bonusString = String(bonus3);   // Convert integer to String
  display_status6[1] = bonusString.c_str();  // Convert String to const char*
  drawCenteredTextMultipleWords(display_status6, 2, scaleColor(7,2,0), 1, current_font);
  delay(400);
  clear_display();

  bonusString = String(bonus4);   // Convert integer to String
  static const char* display_status7[] = { "Bonus", "Total",  ""};
  display_status7[2] = bonusString.c_str();  // Convert String to const char*
  drawCenteredTextMultipleWords(display_status7, 3, scaleColor(7,2,0), 1, current_font);
  delay(1800);
  clear_display();
}

void in_game_screen(const char* number1, const char* number2, const char* number3, const char* number4, const char* centeredText, uint16_t color, int spacing, const GFXfont* font) {

    matrix.setFont(font);
    matrix.setTextSize(1); // Set text size to the smallest available size

    int charWidth = 5;      // Fixed width for each character
    int lineHeight = 7;     // Height of each line of text
    int maxDigits = 5;      // We assume up to 5 digits for alignment

    // Top-left positions for the first and second numbers
    int x1 = 2 - 7;         // Set x position for left alignment with padding
    int y1 = 7;             // Set y position close to the top for the first number
    int y2 = y1 + lineHeight + 1;  // Position for the second number, with 1-pixel spacing

    // Draw the first number at the top-left
    int textLength1 = strlen(number1);
    for (int j = 0; j < textLength1; j++) {
        matrix.setCursor(x1 + j * (charWidth + spacing), y1);
        matrix.setTextColor(color);
        matrix.print(number1[j]);
    }

    // Draw the second number directly below the first
    int textLength2 = strlen(number2);
    for (int j = 0; j < textLength2; j++) {
        matrix.setCursor(x1 + j * (charWidth + spacing), y2);
        matrix.setTextColor(color);
        matrix.print(number2[j]);
    }

    // Calculate the x position for the third number to align as if it's a 5-digit number
    int textLength3 = strlen(number3);
    int totalWidth = maxDigits * charWidth + (maxDigits - 1) * spacing; // Total width for 5 digits
    int x3 = WIDTH - totalWidth - 5;  // Align as if it's a 5-digit number, with right padding
    int y3 = y1;                      // Align y position for the third number at the top

    // Draw the third number at the top-right, aligned with 5-digit spacing
    for (int j = 0; j < textLength3; j++) {
        matrix.setCursor(x3 + j * (charWidth + spacing), y3);
        matrix.setTextColor(color);
        matrix.print(number3[j]);
    }

    // Calculate y position for the fourth number, with 1 pixel spacing below the third
    int y4 = y3 + lineHeight + 1;
    int textLength4 = strlen(number4);

    // Draw the fourth number directly below the third, aligned with 5-digit spacing
    for (int j = 0; j < textLength4; j++) {
        matrix.setCursor(x3 + j * (charWidth + spacing), y4);
        matrix.setTextColor(color);
        matrix.print(number4[j]);
    }

    // Calculate the position for centered text, two pixels below the fourth number
    int textLengthCentered = strlen(centeredText);
    int textWidthCentered = textLengthCentered * charWidth + (textLengthCentered - 1) * spacing;
    int xCentered = ((WIDTH - textWidthCentered) / 2) - 5; // Center the text horizontally
    int yCentered = y4 + lineHeight + 2;

    // Draw the centered text below the fourth number
    for (int j = 0; j < textLengthCentered; j++) {
        matrix.setCursor(xCentered + j * (charWidth + spacing), yCentered);
        matrix.setTextColor(matrix.Color333(255, 0, 0));
        matrix.print(centeredText[j]);
    }

    //delay(100000);  // Delay to allow time for display
}

void scrolling_text(const char* text, uint16_t color, int speed, const GFXfont* font) {
    matrix.setFont(font);
    matrix.setTextSize(1);      // Set text size to the default

    int charWidth = 5;                  // Each character is 5 pixels wide
    int spacing = 1;                    // 1-pixel space between characters
    int textLength = strlen(text);      // Total number of characters in the text

    int totalTextWidth = textLength * (charWidth + spacing);  // Total width of all text

    int y = matrix.height();  // Center the text vertically (7 pixels high)

    // Scroll the text from right to left until the last character scrolls fully off the screen
    for (int offset = matrix.width(); offset >= -totalTextWidth - charWidth; offset--) {
        matrix.fillRect(0, matrix.height() - 7, matrix.width(), 7, matrix.Color333(0, 0, 0)); // Clear area

        // Draw each character in the string one by one
        for (int i = 0; i < textLength; i++) {
            int charX = offset + i * (charWidth + spacing);  // X position for each character
            if (charX < matrix.width() && (charX + charWidth) >= 0) {  // Only draw if fully within display bounds
                matrix.setCursor(charX, y);         // Set cursor position for the character
                matrix.setTextColor(color);         // Set text color
                matrix.print(text[i]);              // Draw the character
            }
        }

        delay(speed);   // Control the scrolling speed
    }
}

void debug_animations() {
  clear_display();
  // List of animations that you can call

  //MULTIBALLS
  bagels_multiball_animation();
  ball_animation(20, 1);
  pcp_multiball_animation();
  party_button_multiball_animation();

  // Something is lit animation
  light_extra_ball_animation();
  light_mystery_animation();
  light_house_meeting();
  light_bagels_multiball();
  light_pcp_multiball();
  light_party_button_multiball();
  light_opcommathon();

  // Hurry Up Animations
  hurry_up_animation("Lounge", 10000);

  ball_saved_animation();
  playfield_multiplier_animation("2x!");
  warning_animation(warning_num);
  player_up("2");
  skill_shot_animation();
  super_skill_shot_animation();
  impossible_skill_shot_animation();
  super_jets_animation();
  extra_ball_animation();
  jackpot_animation("JACKPOT", " ", 1);
  jackpot_animation("SUPER", "JACKPOT", 2);
  add_a_ball_animation();
  calculate_bonus_animation(0, 2, 1, 1, 2);

  static const char* numbers[] = { "50000", "20", "60000", "3" };
  in_game_screen(numbers[0], numbers[1], numbers[2], numbers[3], "Player 1", matrix.Color333(255, 50, 0), 1, current_font);
  delay(200);
  scrolling_text("Shoot The RIGHT RAMP!", matrix.Color333(0, 255, 0), 0, current_font);

  // When you hit targets / rollovers
  csh_letters(true, false, true);
  _1976_rollovers(true, true, false, false);
  rtp_letters(true, true, false);
  big_letters(true, true, true);
  bepis_letters(true, true, false, true, true);
}

void setup() {
    // Get Scores from 2040 later
    strcpy(grand_champion, "GAR 50000");
    strcpy(high_score_1, "LEO 10000");
    strcpy(high_score_2, "ETH 5000");
    strcpy(high_score_3, "IAN 2500");
    strcpy(high_score_4, "BIG 1000");
    strcpy(high_score_5, "DAN 500");

    matrix.begin();

    matrix.setTextWrap(false); // Disable text wrapping

    clear_display();

    attract_mode = true;

    //debug_animations();

    // Set text size to 1 (8x8 pixels)
    matrix.setTextSize(1);
}

bool inGame = false;
void loop() {
  if (inGame == true) {
    attract_mode = false;

    // Do scoring stuff

    // Check if any of these occur

  }

  if (attract_mode == true) {
      attractMode();
  }
}